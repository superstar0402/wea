#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(dead_code)]
/* automatically generated by rust-bindgen */

pub const IO_USB_MAX_ENDPOINTS: u32 = 6;
pub const _SAL_VERSION: u32 = 20;
pub const __SAL_H_VERSION: u32 = 180000000;
pub const _USE_DECLSPECS_FOR_SAL: u32 = 0;
pub const _USE_ATTRIBUTES_FOR_SAL: u32 = 0;
pub const _CRT_PACKING: u32 = 8;
pub const _HAS_EXCEPTIONS: u32 = 1;
pub const _ARGMAX: u32 = 100;
pub const _CRT_INT_MAX: u32 = 2147483647;
pub const _CRT_FUNCTIONS_REQUIRED: u32 = 1;
pub const _CRT_HAS_CXX17: u32 = 0;
pub const _ARM_WINAPI_PARTITION_DESKTOP_SDK_AVAILABLE: u32 = 1;
pub const _CRT_BUILD_DESKTOP_APP: u32 = 1;
pub const __STDC_SECURE_LIB__: u32 = 200411;
pub const __GOT_SECURE_LIB__: u32 = 200411;
pub const __STDC_WANT_SECURE_LIB__: u32 = 1;
pub const _SECURECRT_FILL_BUFFER_PATTERN: u32 = 254;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES: u32 = 1;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY: u32 = 0;
pub const _CRT_INTERNAL_STDIO_SYMBOL_PREFIX: &'static [u8; 1usize] = b"\0";
pub const _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION: u32 = 1;
pub const _CRT_INTERNAL_PRINTF_STANDARD_SNPRINTF_BEHAVIOR: u32 = 2;
pub const _CRT_INTERNAL_PRINTF_LEGACY_WIDE_SPECIFIERS: u32 = 4;
pub const _CRT_INTERNAL_PRINTF_LEGACY_MSVCRT_COMPATIBILITY: u32 = 8;
pub const _CRT_INTERNAL_PRINTF_LEGACY_THREE_DIGIT_EXPONENTS: u32 = 16;
pub const _CRT_INTERNAL_SCANF_SECURECRT: u32 = 1;
pub const _CRT_INTERNAL_SCANF_LEGACY_WIDE_SPECIFIERS: u32 = 2;
pub const _CRT_INTERNAL_SCANF_LEGACY_MSVCRT_COMPATIBILITY: u32 = 4;
pub const BUFSIZ: u32 = 512;
pub const _NSTREAM_: u32 = 512;
pub const _IOB_ENTRIES: u32 = 3;
pub const EOF: i32 = -1;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 64;
pub const _IONBF: u32 = 4;
pub const L_tmpnam: u32 = 260;
pub const L_tmpnam_s: u32 = 260;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const SEEK_SET: u32 = 0;
pub const FILENAME_MAX: u32 = 260;
pub const FOPEN_MAX: u32 = 20;
pub const _SYS_OPEN: u32 = 20;
pub const TMP_MAX: u32 = 2147483647;
pub const TMP_MAX_S: u32 = 2147483647;
pub const _TMP_MAX_S: u32 = 2147483647;
pub const SYS_OPEN: u32 = 20;
pub const _MAX_ITOSTR_BASE16_COUNT: u32 = 9;
pub const _MAX_ITOSTR_BASE10_COUNT: u32 = 12;
pub const _MAX_ITOSTR_BASE8_COUNT: u32 = 12;
pub const _MAX_ITOSTR_BASE2_COUNT: u32 = 33;
pub const _MAX_LTOSTR_BASE16_COUNT: u32 = 9;
pub const _MAX_LTOSTR_BASE10_COUNT: u32 = 12;
pub const _MAX_LTOSTR_BASE8_COUNT: u32 = 12;
pub const _MAX_LTOSTR_BASE2_COUNT: u32 = 33;
pub const _MAX_ULTOSTR_BASE16_COUNT: u32 = 9;
pub const _MAX_ULTOSTR_BASE10_COUNT: u32 = 11;
pub const _MAX_ULTOSTR_BASE8_COUNT: u32 = 12;
pub const _MAX_ULTOSTR_BASE2_COUNT: u32 = 33;
pub const _MAX_I64TOSTR_BASE16_COUNT: u32 = 17;
pub const _MAX_I64TOSTR_BASE10_COUNT: u32 = 21;
pub const _MAX_I64TOSTR_BASE8_COUNT: u32 = 23;
pub const _MAX_I64TOSTR_BASE2_COUNT: u32 = 65;
pub const _MAX_U64TOSTR_BASE16_COUNT: u32 = 17;
pub const _MAX_U64TOSTR_BASE10_COUNT: u32 = 21;
pub const _MAX_U64TOSTR_BASE8_COUNT: u32 = 23;
pub const _MAX_U64TOSTR_BASE2_COUNT: u32 = 65;
pub const CHAR_BIT: u32 = 8;
pub const SCHAR_MIN: i32 = -128;
pub const SCHAR_MAX: u32 = 127;
pub const UCHAR_MAX: u32 = 255;
pub const CHAR_MIN: i32 = -128;
pub const CHAR_MAX: u32 = 127;
pub const MB_LEN_MAX: u32 = 5;
pub const SHRT_MIN: i32 = -32768;
pub const SHRT_MAX: u32 = 32767;
pub const USHRT_MAX: u32 = 65535;
pub const INT_MIN: i32 = -2147483648;
pub const INT_MAX: u32 = 2147483647;
pub const UINT_MAX: u32 = 4294967295;
pub const LONG_MIN: i32 = -2147483648;
pub const LONG_MAX: u32 = 2147483647;
pub const ULONG_MAX: u32 = 4294967295;
pub const EXIT_SUCCESS: u32 = 0;
pub const EXIT_FAILURE: u32 = 1;
pub const _WRITE_ABORT_MSG: u32 = 1;
pub const _CALL_REPORTFAULT: u32 = 2;
pub const _OUT_TO_DEFAULT: u32 = 0;
pub const _OUT_TO_STDERR: u32 = 1;
pub const _OUT_TO_MSGBOX: u32 = 2;
pub const _REPORT_ERRMODE: u32 = 3;
pub const RAND_MAX: u32 = 32767;
pub const _CVTBUFSIZE: u32 = 349;
pub const _MAX_PATH: u32 = 260;
pub const _MAX_DRIVE: u32 = 3;
pub const _MAX_DIR: u32 = 256;
pub const _MAX_FNAME: u32 = 256;
pub const _MAX_EXT: u32 = 256;
pub const _MAX_ENV: u32 = 32767;
pub const EPERM: u32 = 1;
pub const ENOENT: u32 = 2;
pub const ESRCH: u32 = 3;
pub const EINTR: u32 = 4;
pub const EIO: u32 = 5;
pub const ENXIO: u32 = 6;
pub const E2BIG: u32 = 7;
pub const ENOEXEC: u32 = 8;
pub const EBADF: u32 = 9;
pub const ECHILD: u32 = 10;
pub const EAGAIN: u32 = 11;
pub const ENOMEM: u32 = 12;
pub const EACCES: u32 = 13;
pub const EFAULT: u32 = 14;
pub const EBUSY: u32 = 16;
pub const EEXIST: u32 = 17;
pub const EXDEV: u32 = 18;
pub const ENODEV: u32 = 19;
pub const ENOTDIR: u32 = 20;
pub const EISDIR: u32 = 21;
pub const ENFILE: u32 = 23;
pub const EMFILE: u32 = 24;
pub const ENOTTY: u32 = 25;
pub const EFBIG: u32 = 27;
pub const ENOSPC: u32 = 28;
pub const ESPIPE: u32 = 29;
pub const EROFS: u32 = 30;
pub const EMLINK: u32 = 31;
pub const EPIPE: u32 = 32;
pub const EDOM: u32 = 33;
pub const EDEADLK: u32 = 36;
pub const ENAMETOOLONG: u32 = 38;
pub const ENOLCK: u32 = 39;
pub const ENOSYS: u32 = 40;
pub const ENOTEMPTY: u32 = 41;
pub const EINVAL: u32 = 22;
pub const ERANGE: u32 = 34;
pub const EILSEQ: u32 = 42;
pub const STRUNCATE: u32 = 80;
pub const EDEADLOCK: u32 = 36;
pub const EADDRINUSE: u32 = 100;
pub const EADDRNOTAVAIL: u32 = 101;
pub const EAFNOSUPPORT: u32 = 102;
pub const EALREADY: u32 = 103;
pub const EBADMSG: u32 = 104;
pub const ECANCELED: u32 = 105;
pub const ECONNABORTED: u32 = 106;
pub const ECONNREFUSED: u32 = 107;
pub const ECONNRESET: u32 = 108;
pub const EDESTADDRREQ: u32 = 109;
pub const EHOSTUNREACH: u32 = 110;
pub const EIDRM: u32 = 111;
pub const EINPROGRESS: u32 = 112;
pub const EISCONN: u32 = 113;
pub const ELOOP: u32 = 114;
pub const EMSGSIZE: u32 = 115;
pub const ENETDOWN: u32 = 116;
pub const ENETRESET: u32 = 117;
pub const ENETUNREACH: u32 = 118;
pub const ENOBUFS: u32 = 119;
pub const ENODATA: u32 = 120;
pub const ENOLINK: u32 = 121;
pub const ENOMSG: u32 = 122;
pub const ENOPROTOOPT: u32 = 123;
pub const ENOSR: u32 = 124;
pub const ENOSTR: u32 = 125;
pub const ENOTCONN: u32 = 126;
pub const ENOTRECOVERABLE: u32 = 127;
pub const ENOTSOCK: u32 = 128;
pub const ENOTSUP: u32 = 129;
pub const EOPNOTSUPP: u32 = 130;
pub const EOTHER: u32 = 131;
pub const EOVERFLOW: u32 = 132;
pub const EOWNERDEAD: u32 = 133;
pub const EPROTO: u32 = 134;
pub const EPROTONOSUPPORT: u32 = 135;
pub const EPROTOTYPE: u32 = 136;
pub const ETIME: u32 = 137;
pub const ETIMEDOUT: u32 = 138;
pub const ETXTBSY: u32 = 139;
pub const EWOULDBLOCK: u32 = 140;
pub const _NLSCMPERROR: u32 = 2147483647;
pub const WCHAR_MIN: u32 = 0;
pub const WCHAR_MAX: u32 = 65535;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 65535;
pub const USBD_MAX_NUM_INTERFACES: u32 = 3;
pub const USBD_MAX_NUM_CONFIGURATION: u32 = 1;
pub const USBD_MAX_STR_DESC_SIZ: u32 = 512;
pub const USBD_SUPPORT_USER_STRING: u32 = 0;
pub const USBD_DEBUG_LEVEL: u32 = 0;
pub const USBD_LPM_ENABLED: u32 = 1;
pub const USBD_SELF_POWERED: u32 = 1;
pub const DEVICE_FS: u32 = 0;
pub const USB_LEN_DEV_QUALIFIER_DESC: u32 = 10;
pub const USB_LEN_DEV_DESC: u32 = 18;
pub const USB_LEN_CFG_DESC: u32 = 9;
pub const USB_LEN_IF_DESC: u32 = 9;
pub const USB_LEN_EP_DESC: u32 = 7;
pub const USB_LEN_OTG_DESC: u32 = 3;
pub const USB_LEN_LANGID_STR_DESC: u32 = 4;
pub const USB_LEN_OTHER_SPEED_DESC_SIZ: u32 = 9;
pub const USBD_IDX_LANGID_STR: u32 = 0;
pub const USBD_IDX_MFC_STR: u32 = 1;
pub const USBD_IDX_PRODUCT_STR: u32 = 2;
pub const USBD_IDX_SERIAL_STR: u32 = 3;
pub const USBD_IDX_CONFIG_STR: u32 = 4;
pub const USBD_IDX_INTERFACE_STR: u32 = 5;
pub const USB_REQ_TYPE_STANDARD: u32 = 0;
pub const USB_REQ_TYPE_CLASS: u32 = 32;
pub const USB_REQ_TYPE_VENDOR: u32 = 64;
pub const USB_REQ_TYPE_MASK: u32 = 96;
pub const USB_REQ_RECIPIENT_DEVICE: u32 = 0;
pub const USB_REQ_RECIPIENT_INTERFACE: u32 = 1;
pub const USB_REQ_RECIPIENT_ENDPOINT: u32 = 2;
pub const USB_REQ_RECIPIENT_MASK: u32 = 3;
pub const USB_REQ_GET_STATUS: u32 = 0;
pub const USB_REQ_CLEAR_FEATURE: u32 = 1;
pub const USB_REQ_SET_FEATURE: u32 = 3;
pub const USB_REQ_SET_ADDRESS: u32 = 5;
pub const USB_REQ_GET_DESCRIPTOR: u32 = 6;
pub const USB_REQ_SET_DESCRIPTOR: u32 = 7;
pub const USB_REQ_GET_CONFIGURATION: u32 = 8;
pub const USB_REQ_SET_CONFIGURATION: u32 = 9;
pub const USB_REQ_GET_INTERFACE: u32 = 10;
pub const USB_REQ_SET_INTERFACE: u32 = 11;
pub const USB_REQ_SYNCH_FRAME: u32 = 12;
pub const USB_DESC_TYPE_DEVICE: u32 = 1;
pub const USB_DESC_TYPE_CONFIGURATION: u32 = 2;
pub const USB_DESC_TYPE_STRING: u32 = 3;
pub const USB_DESC_TYPE_INTERFACE: u32 = 4;
pub const USB_DESC_TYPE_ENDPOINT: u32 = 5;
pub const USB_DESC_TYPE_DEVICE_QUALIFIER: u32 = 6;
pub const USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION: u32 = 7;
pub const USB_DESC_TYPE_BOS: u32 = 15;
pub const USB_CONFIG_REMOTE_WAKEUP: u32 = 2;
pub const USB_CONFIG_SELF_POWERED: u32 = 1;
pub const USB_FEATURE_EP_HALT: u32 = 0;
pub const USB_FEATURE_REMOTE_WAKEUP: u32 = 1;
pub const USB_FEATURE_TEST_MODE: u32 = 2;
pub const USB_DEVICE_CAPABITY_TYPE: u32 = 16;
pub const USB_HS_MAX_PACKET_SIZE: u32 = 512;
pub const USB_FS_MAX_PACKET_SIZE: u32 = 64;
pub const USB_MAX_EP0_SIZE: u32 = 64;
pub const USBD_STATE_DEFAULT: u32 = 1;
pub const USBD_STATE_ADDRESSED: u32 = 2;
pub const USBD_STATE_CONFIGURED: u32 = 3;
pub const USBD_STATE_SUSPENDED: u32 = 4;
pub const USBD_EP0_IDLE: u32 = 0;
pub const USBD_EP0_SETUP: u32 = 1;
pub const USBD_EP0_DATA_IN: u32 = 2;
pub const USBD_EP0_DATA_OUT: u32 = 3;
pub const USBD_EP0_STATUS_IN: u32 = 4;
pub const USBD_EP0_STATUS_OUT: u32 = 5;
pub const USBD_EP0_STALL: u32 = 6;
pub const USBD_EP_TYPE_CTRL: u32 = 0;
pub const USBD_EP_TYPE_ISOC: u32 = 1;
pub const USBD_EP_TYPE_BULK: u32 = 2;
pub const USBD_EP_TYPE_INTR: u32 = 3;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct apdu_buffer_s {
    pub buf: *mut cty::c_uchar,
    pub len: cty::c_ushort,
}
#[test]
fn bindgen_test_layout_apdu_buffer_s() {
    assert_eq!(
        ::core::mem::size_of::<apdu_buffer_s>(),
        16usize,
        concat!("Size of: ", stringify!(apdu_buffer_s))
    );
    assert_eq!(
        ::core::mem::align_of::<apdu_buffer_s>(),
        8usize,
        concat!("Alignment of ", stringify!(apdu_buffer_s))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<apdu_buffer_s>())).buf as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(apdu_buffer_s),
            "::",
            stringify!(buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<apdu_buffer_s>())).len as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(apdu_buffer_s),
            "::",
            stringify!(len)
        )
    );
}
impl Default for apdu_buffer_s {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type apdu_buffer_t = apdu_buffer_s;
pub type va_list = *mut cty::c_char;
extern "C" {
    pub fn __va_start(arg1: *mut *mut cty::c_char, ...);
}
pub type size_t = cty::c_ulonglong;
pub type __vcrt_bool = bool;
pub type wchar_t = cty::c_ushort;
extern "C" {
    pub fn __security_init_cookie();
}
extern "C" {
    pub fn __security_check_cookie(_StackCookie: usize);
}
extern "C" {
    pub fn __report_gsfailure(_StackCookie: usize);
}
extern "C" {
    pub static mut __security_cookie: usize;
}
pub type __crt_bool = bool;
extern "C" {
    pub fn _invalid_parameter_noinfo();
}
extern "C" {
    pub fn _invalid_parameter_noinfo_noreturn();
}
extern "C" {
    pub fn _invoke_watson(
        _Expression: *const wchar_t,
        _FunctionName: *const wchar_t,
        _FileName: *const wchar_t,
        _LineNo: cty::c_uint,
        _Reserved: usize,
    );
}
pub type errno_t = cty::c_int;
pub type wint_t = cty::c_ushort;
pub type wctype_t = cty::c_ushort;
pub type __time32_t = cty::c_long;
pub type __time64_t = cty::c_longlong;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __crt_locale_data_public {
    pub _locale_pctype: *const cty::c_ushort,
    pub _locale_mb_cur_max: cty::c_int,
    pub _locale_lc_codepage: cty::c_uint,
}
#[test]
fn bindgen_test_layout___crt_locale_data_public() {
    assert_eq!(
        ::core::mem::size_of::<__crt_locale_data_public>(),
        16usize,
        concat!("Size of: ", stringify!(__crt_locale_data_public))
    );
    assert_eq!(
        ::core::mem::align_of::<__crt_locale_data_public>(),
        8usize,
        concat!("Alignment of ", stringify!(__crt_locale_data_public))
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<__crt_locale_data_public>()))._locale_pctype as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_data_public),
            "::",
            stringify!(_locale_pctype)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<__crt_locale_data_public>()))._locale_mb_cur_max as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_data_public),
            "::",
            stringify!(_locale_mb_cur_max)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<__crt_locale_data_public>()))._locale_lc_codepage as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_data_public),
            "::",
            stringify!(_locale_lc_codepage)
        )
    );
}
impl Default for __crt_locale_data_public {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __crt_locale_pointers {
    pub locinfo: *mut __crt_locale_data,
    pub mbcinfo: *mut __crt_multibyte_data,
}
#[test]
fn bindgen_test_layout___crt_locale_pointers() {
    assert_eq!(
        ::core::mem::size_of::<__crt_locale_pointers>(),
        16usize,
        concat!("Size of: ", stringify!(__crt_locale_pointers))
    );
    assert_eq!(
        ::core::mem::align_of::<__crt_locale_pointers>(),
        8usize,
        concat!("Alignment of ", stringify!(__crt_locale_pointers))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<__crt_locale_pointers>())).locinfo as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_pointers),
            "::",
            stringify!(locinfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<__crt_locale_pointers>())).mbcinfo as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_pointers),
            "::",
            stringify!(mbcinfo)
        )
    );
}
impl Default for __crt_locale_pointers {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type _locale_t = *mut __crt_locale_pointers;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct _Mbstatet {
    pub _Wchar: cty::c_ulong,
    pub _Byte: cty::c_ushort,
    pub _State: cty::c_ushort,
}
#[test]
fn bindgen_test_layout__Mbstatet() {
    assert_eq!(
        ::core::mem::size_of::<_Mbstatet>(),
        8usize,
        concat!("Size of: ", stringify!(_Mbstatet))
    );
    assert_eq!(
        ::core::mem::align_of::<_Mbstatet>(),
        4usize,
        concat!("Alignment of ", stringify!(_Mbstatet))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_Mbstatet>()))._Wchar as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_Mbstatet),
            "::",
            stringify!(_Wchar)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_Mbstatet>()))._Byte as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_Mbstatet),
            "::",
            stringify!(_Byte)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_Mbstatet>()))._State as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_Mbstatet),
            "::",
            stringify!(_State)
        )
    );
}
pub type mbstate_t = _Mbstatet;
pub type time_t = __time64_t;
pub type rsize_t = size_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _iobuf {
    pub _Placeholder: *mut cty::c_void,
}
#[test]
fn bindgen_test_layout__iobuf() {
    assert_eq!(
        ::core::mem::size_of::<_iobuf>(),
        8usize,
        concat!("Size of: ", stringify!(_iobuf))
    );
    assert_eq!(
        ::core::mem::align_of::<_iobuf>(),
        8usize,
        concat!("Alignment of ", stringify!(_iobuf))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_iobuf>()))._Placeholder as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_iobuf),
            "::",
            stringify!(_Placeholder)
        )
    );
}
impl Default for _iobuf {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type FILE = _iobuf;
extern "C" {
    pub fn __acrt_iob_func(_Ix: cty::c_uint) -> *mut FILE;
}
extern "C" {
    pub fn fgetwc(_Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _fgetwchar() -> wint_t;
}
extern "C" {
    pub fn fputwc(_Character: wchar_t, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _fputwchar(_Character: wchar_t) -> wint_t;
}
extern "C" {
    pub fn getwc(_Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn getwchar() -> wint_t;
}
extern "C" {
    pub fn fgetws(
        _Buffer: *mut wchar_t,
        _BufferCount: cty::c_int,
        _Stream: *mut FILE,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn fputws(_Buffer: *const wchar_t, _Stream: *mut FILE) -> cty::c_int;
}
extern "C" {
    pub fn _getws_s(_Buffer: *mut wchar_t, _BufferCount: size_t) -> *mut wchar_t;
}
extern "C" {
    pub fn putwc(_Character: wchar_t, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn putwchar(_Character: wchar_t) -> wint_t;
}
extern "C" {
    pub fn _putws(_Buffer: *const wchar_t) -> cty::c_int;
}
extern "C" {
    pub fn ungetwc(_Character: wint_t, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _wfdopen(_FileHandle: cty::c_int, _Mode: *const wchar_t) -> *mut FILE;
}
extern "C" {
    pub fn _wfopen(_FileName: *const wchar_t, _Mode: *const wchar_t) -> *mut FILE;
}
extern "C" {
    pub fn _wfopen_s(
        _Stream: *mut *mut FILE,
        _FileName: *const wchar_t,
        _Mode: *const wchar_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wfreopen(
        _FileName: *const wchar_t,
        _Mode: *const wchar_t,
        _OldStream: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn _wfreopen_s(
        _Stream: *mut *mut FILE,
        _FileName: *const wchar_t,
        _Mode: *const wchar_t,
        _OldStream: *mut FILE,
    ) -> errno_t;
}
extern "C" {
    pub fn _wfsopen(
        _FileName: *const wchar_t,
        _Mode: *const wchar_t,
        _ShFlag: cty::c_int,
    ) -> *mut FILE;
}
extern "C" {
    pub fn _wperror(_ErrorMessage: *const wchar_t);
}
extern "C" {
    pub fn _wpopen(_Command: *const wchar_t, _Mode: *const wchar_t) -> *mut FILE;
}
extern "C" {
    pub fn _wremove(_FileName: *const wchar_t) -> cty::c_int;
}
extern "C" {
    pub fn _wtempnam(_Directory: *const wchar_t, _FilePrefix: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wtmpnam_s(_Buffer: *mut wchar_t, _BufferCount: size_t) -> errno_t;
}
extern "C" {
    pub fn _wtmpnam(_Buffer: *mut wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _fgetwc_nolock(_Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _fputwc_nolock(_Character: wchar_t, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _getwc_nolock(_Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _putwc_nolock(_Character: wchar_t, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _ungetwc_nolock(_Character: wint_t, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn __stdio_common_vfwprintf(
        _Options: cty::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> cty::c_int;
}
extern "C" {
    pub fn __stdio_common_vfwprintf_s(
        _Options: cty::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> cty::c_int;
}
extern "C" {
    pub fn __stdio_common_vfwprintf_p(
        _Options: cty::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> cty::c_int;
}
extern "C" {
    pub fn __stdio_common_vfwscanf(
        _Options: cty::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> cty::c_int;
}
extern "C" {
    pub fn __stdio_common_vswprintf(
        _Options: cty::c_ulonglong,
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> cty::c_int;
}
extern "C" {
    pub fn __stdio_common_vswprintf_s(
        _Options: cty::c_ulonglong,
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> cty::c_int;
}
extern "C" {
    pub fn __stdio_common_vsnwprintf_s(
        _Options: cty::c_ulonglong,
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
        _MaxCount: size_t,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> cty::c_int;
}
extern "C" {
    pub fn __stdio_common_vswprintf_p(
        _Options: cty::c_ulonglong,
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> cty::c_int;
}
extern "C" {
    pub fn __stdio_common_vswscanf(
        _Options: cty::c_ulonglong,
        _Buffer: *const wchar_t,
        _BufferCount: size_t,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> cty::c_int;
}
pub type fpos_t = cty::c_longlong;
extern "C" {
    pub fn _get_stream_buffer_pointers(
        _Stream: *mut FILE,
        _Base: *mut *mut *mut cty::c_char,
        _Pointer: *mut *mut *mut cty::c_char,
        _Count: *mut *mut cty::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn clearerr_s(_Stream: *mut FILE) -> errno_t;
}
extern "C" {
    pub fn fopen_s(
        _Stream: *mut *mut FILE,
        _FileName: *const cty::c_char,
        _Mode: *const cty::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn fread_s(
        _Buffer: *mut cty::c_void,
        _BufferSize: size_t,
        _ElementSize: size_t,
        _ElementCount: size_t,
        _Stream: *mut FILE,
    ) -> size_t;
}
extern "C" {
    pub fn freopen_s(
        _Stream: *mut *mut FILE,
        _FileName: *const cty::c_char,
        _Mode: *const cty::c_char,
        _OldStream: *mut FILE,
    ) -> errno_t;
}
extern "C" {
    pub fn gets_s(_Buffer: *mut cty::c_char, _Size: rsize_t) -> *mut cty::c_char;
}
extern "C" {
    pub fn tmpfile_s(_Stream: *mut *mut FILE) -> errno_t;
}
extern "C" {
    pub fn tmpnam_s(_Buffer: *mut cty::c_char, _Size: rsize_t) -> errno_t;
}
extern "C" {
    pub fn clearerr(_Stream: *mut FILE);
}
extern "C" {
    pub fn fclose(_Stream: *mut FILE) -> cty::c_int;
}
extern "C" {
    pub fn _fcloseall() -> cty::c_int;
}
extern "C" {
    pub fn _fdopen(_FileHandle: cty::c_int, _Mode: *const cty::c_char) -> *mut FILE;
}
extern "C" {
    pub fn feof(_Stream: *mut FILE) -> cty::c_int;
}
extern "C" {
    pub fn ferror(_Stream: *mut FILE) -> cty::c_int;
}
extern "C" {
    pub fn fflush(_Stream: *mut FILE) -> cty::c_int;
}
extern "C" {
    pub fn fgetc(_Stream: *mut FILE) -> cty::c_int;
}
extern "C" {
    pub fn _fgetchar() -> cty::c_int;
}
extern "C" {
    pub fn fgetpos(_Stream: *mut FILE, _Position: *mut fpos_t) -> cty::c_int;
}
extern "C" {
    pub fn fgets(
        _Buffer: *mut cty::c_char,
        _MaxCount: cty::c_int,
        _Stream: *mut FILE,
    ) -> *mut cty::c_char;
}
extern "C" {
    pub fn _fileno(_Stream: *mut FILE) -> cty::c_int;
}
extern "C" {
    pub fn _flushall() -> cty::c_int;
}
extern "C" {
    pub fn fopen(_FileName: *const cty::c_char, _Mode: *const cty::c_char) -> *mut FILE;
}
extern "C" {
    pub fn fputc(_Character: cty::c_int, _Stream: *mut FILE) -> cty::c_int;
}
extern "C" {
    pub fn _fputchar(_Character: cty::c_int) -> cty::c_int;
}
extern "C" {
    pub fn fputs(_Buffer: *const cty::c_char, _Stream: *mut FILE) -> cty::c_int;
}
extern "C" {
    pub fn fread(
        _Buffer: *mut cty::c_void,
        _ElementSize: cty::c_ulonglong,
        _ElementCount: cty::c_ulonglong,
        _Stream: *mut FILE,
    ) -> cty::c_ulonglong;
}
extern "C" {
    pub fn freopen(
        _FileName: *const cty::c_char,
        _Mode: *const cty::c_char,
        _Stream: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn _fsopen(
        _FileName: *const cty::c_char,
        _Mode: *const cty::c_char,
        _ShFlag: cty::c_int,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fsetpos(_Stream: *mut FILE, _Position: *const fpos_t) -> cty::c_int;
}
extern "C" {
    pub fn fseek(_Stream: *mut FILE, _Offset: cty::c_long, _Origin: cty::c_int) -> cty::c_int;
}
extern "C" {
    pub fn _fseeki64(
        _Stream: *mut FILE,
        _Offset: cty::c_longlong,
        _Origin: cty::c_int,
    ) -> cty::c_int;
}
extern "C" {
    pub fn ftell(_Stream: *mut FILE) -> cty::c_long;
}
extern "C" {
    pub fn _ftelli64(_Stream: *mut FILE) -> cty::c_longlong;
}
extern "C" {
    pub fn fwrite(
        _Buffer: *const cty::c_void,
        _ElementSize: cty::c_ulonglong,
        _ElementCount: cty::c_ulonglong,
        _Stream: *mut FILE,
    ) -> cty::c_ulonglong;
}
extern "C" {
    pub fn getc(_Stream: *mut FILE) -> cty::c_int;
}
extern "C" {
    pub fn getchar() -> cty::c_int;
}
extern "C" {
    pub fn _getmaxstdio() -> cty::c_int;
}
extern "C" {
    pub fn _getw(_Stream: *mut FILE) -> cty::c_int;
}
extern "C" {
    pub fn perror(_ErrorMessage: *const cty::c_char);
}
extern "C" {
    pub fn _pclose(_Stream: *mut FILE) -> cty::c_int;
}
extern "C" {
    pub fn _popen(_Command: *const cty::c_char, _Mode: *const cty::c_char) -> *mut FILE;
}
extern "C" {
    pub fn putc(_Character: cty::c_int, _Stream: *mut FILE) -> cty::c_int;
}
extern "C" {
    pub fn putchar(_Character: cty::c_int) -> cty::c_int;
}
extern "C" {
    pub fn puts(_Buffer: *const cty::c_char) -> cty::c_int;
}
extern "C" {
    pub fn _putw(_Word: cty::c_int, _Stream: *mut FILE) -> cty::c_int;
}
extern "C" {
    pub fn remove(_FileName: *const cty::c_char) -> cty::c_int;
}
extern "C" {
    pub fn rename(_OldFileName: *const cty::c_char, _NewFileName: *const cty::c_char)
        -> cty::c_int;
}
extern "C" {
    pub fn _unlink(_FileName: *const cty::c_char) -> cty::c_int;
}
extern "C" {
    pub fn unlink(_FileName: *const cty::c_char) -> cty::c_int;
}
extern "C" {
    pub fn rewind(_Stream: *mut FILE);
}
extern "C" {
    pub fn _rmtmp() -> cty::c_int;
}
extern "C" {
    pub fn setbuf(_Stream: *mut FILE, _Buffer: *mut cty::c_char);
}
extern "C" {
    pub fn _setmaxstdio(_Maximum: cty::c_int) -> cty::c_int;
}
extern "C" {
    pub fn setvbuf(
        _Stream: *mut FILE,
        _Buffer: *mut cty::c_char,
        _Mode: cty::c_int,
        _Size: size_t,
    ) -> cty::c_int;
}
extern "C" {
    pub fn _tempnam(
        _DirectoryName: *const cty::c_char,
        _FilePrefix: *const cty::c_char,
    ) -> *mut cty::c_char;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(_Buffer: *mut cty::c_char) -> *mut cty::c_char;
}
extern "C" {
    pub fn ungetc(_Character: cty::c_int, _Stream: *mut FILE) -> cty::c_int;
}
extern "C" {
    pub fn _lock_file(_Stream: *mut FILE);
}
extern "C" {
    pub fn _unlock_file(_Stream: *mut FILE);
}
extern "C" {
    pub fn _fclose_nolock(_Stream: *mut FILE) -> cty::c_int;
}
extern "C" {
    pub fn _fflush_nolock(_Stream: *mut FILE) -> cty::c_int;
}
extern "C" {
    pub fn _fgetc_nolock(_Stream: *mut FILE) -> cty::c_int;
}
extern "C" {
    pub fn _fputc_nolock(_Character: cty::c_int, _Stream: *mut FILE) -> cty::c_int;
}
extern "C" {
    pub fn _fread_nolock(
        _Buffer: *mut cty::c_void,
        _ElementSize: size_t,
        _ElementCount: size_t,
        _Stream: *mut FILE,
    ) -> size_t;
}
extern "C" {
    pub fn _fread_nolock_s(
        _Buffer: *mut cty::c_void,
        _BufferSize: size_t,
        _ElementSize: size_t,
        _ElementCount: size_t,
        _Stream: *mut FILE,
    ) -> size_t;
}
extern "C" {
    pub fn _fseek_nolock(
        _Stream: *mut FILE,
        _Offset: cty::c_long,
        _Origin: cty::c_int,
    ) -> cty::c_int;
}
extern "C" {
    pub fn _fseeki64_nolock(
        _Stream: *mut FILE,
        _Offset: cty::c_longlong,
        _Origin: cty::c_int,
    ) -> cty::c_int;
}
extern "C" {
    pub fn _ftell_nolock(_Stream: *mut FILE) -> cty::c_long;
}
extern "C" {
    pub fn _ftelli64_nolock(_Stream: *mut FILE) -> cty::c_longlong;
}
extern "C" {
    pub fn _fwrite_nolock(
        _Buffer: *const cty::c_void,
        _ElementSize: size_t,
        _ElementCount: size_t,
        _Stream: *mut FILE,
    ) -> size_t;
}
extern "C" {
    pub fn _getc_nolock(_Stream: *mut FILE) -> cty::c_int;
}
extern "C" {
    pub fn _putc_nolock(_Character: cty::c_int, _Stream: *mut FILE) -> cty::c_int;
}
extern "C" {
    pub fn _ungetc_nolock(_Character: cty::c_int, _Stream: *mut FILE) -> cty::c_int;
}
extern "C" {
    pub fn __p__commode() -> *mut cty::c_int;
}
extern "C" {
    pub fn __stdio_common_vfprintf(
        _Options: cty::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const cty::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> cty::c_int;
}
extern "C" {
    pub fn __stdio_common_vfprintf_s(
        _Options: cty::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const cty::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> cty::c_int;
}
extern "C" {
    pub fn __stdio_common_vfprintf_p(
        _Options: cty::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const cty::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> cty::c_int;
}
extern "C" {
    pub fn _set_printf_count_output(_Value: cty::c_int) -> cty::c_int;
}
extern "C" {
    pub fn _get_printf_count_output() -> cty::c_int;
}
extern "C" {
    pub fn __stdio_common_vfscanf(
        _Options: cty::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const cty::c_char,
        _Locale: _locale_t,
        _Arglist: va_list,
    ) -> cty::c_int;
}
extern "C" {
    pub fn __stdio_common_vsprintf(
        _Options: cty::c_ulonglong,
        _Buffer: *mut cty::c_char,
        _BufferCount: size_t,
        _Format: *const cty::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> cty::c_int;
}
extern "C" {
    pub fn __stdio_common_vsprintf_s(
        _Options: cty::c_ulonglong,
        _Buffer: *mut cty::c_char,
        _BufferCount: size_t,
        _Format: *const cty::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> cty::c_int;
}
extern "C" {
    pub fn __stdio_common_vsnprintf_s(
        _Options: cty::c_ulonglong,
        _Buffer: *mut cty::c_char,
        _BufferCount: size_t,
        _MaxCount: size_t,
        _Format: *const cty::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> cty::c_int;
}
extern "C" {
    pub fn __stdio_common_vsprintf_p(
        _Options: cty::c_ulonglong,
        _Buffer: *mut cty::c_char,
        _BufferCount: size_t,
        _Format: *const cty::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> cty::c_int;
}
extern "C" {
    pub fn __stdio_common_vsscanf(
        _Options: cty::c_ulonglong,
        _Buffer: *const cty::c_char,
        _BufferCount: size_t,
        _Format: *const cty::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> cty::c_int;
}
extern "C" {
    pub fn tempnam(
        _Directory: *const cty::c_char,
        _FilePrefix: *const cty::c_char,
    ) -> *mut cty::c_char;
}
extern "C" {
    pub fn fcloseall() -> cty::c_int;
}
extern "C" {
    pub fn fdopen(_FileHandle: cty::c_int, _Format: *const cty::c_char) -> *mut FILE;
}
extern "C" {
    pub fn fgetchar() -> cty::c_int;
}
extern "C" {
    pub fn fileno(_Stream: *mut FILE) -> cty::c_int;
}
extern "C" {
    pub fn flushall() -> cty::c_int;
}
extern "C" {
    pub fn fputchar(_Ch: cty::c_int) -> cty::c_int;
}
extern "C" {
    pub fn getw(_Stream: *mut FILE) -> cty::c_int;
}
extern "C" {
    pub fn putw(_Ch: cty::c_int, _Stream: *mut FILE) -> cty::c_int;
}
extern "C" {
    pub fn rmtmp() -> cty::c_int;
}
extern "C" {
    pub fn _calloc_base(_Count: size_t, _Size: size_t) -> *mut cty::c_void;
}
extern "C" {
    pub fn calloc(_Count: cty::c_ulonglong, _Size: cty::c_ulonglong) -> *mut cty::c_void;
}
extern "C" {
    pub fn _callnewh(_Size: size_t) -> cty::c_int;
}
extern "C" {
    pub fn _expand(_Block: *mut cty::c_void, _Size: size_t) -> *mut cty::c_void;
}
extern "C" {
    pub fn _free_base(_Block: *mut cty::c_void);
}
extern "C" {
    pub fn free(_Block: *mut cty::c_void);
}
extern "C" {
    pub fn _malloc_base(_Size: size_t) -> *mut cty::c_void;
}
extern "C" {
    pub fn malloc(_Size: cty::c_ulonglong) -> *mut cty::c_void;
}
extern "C" {
    pub fn _msize_base(_Block: *mut cty::c_void) -> size_t;
}
extern "C" {
    pub fn _msize(_Block: *mut cty::c_void) -> size_t;
}
extern "C" {
    pub fn _realloc_base(_Block: *mut cty::c_void, _Size: size_t) -> *mut cty::c_void;
}
extern "C" {
    pub fn realloc(_Block: *mut cty::c_void, _Size: cty::c_ulonglong) -> *mut cty::c_void;
}
extern "C" {
    pub fn _recalloc_base(
        _Block: *mut cty::c_void,
        _Count: size_t,
        _Size: size_t,
    ) -> *mut cty::c_void;
}
extern "C" {
    pub fn _recalloc(_Block: *mut cty::c_void, _Count: size_t, _Size: size_t) -> *mut cty::c_void;
}
extern "C" {
    pub fn _aligned_free(_Block: *mut cty::c_void);
}
extern "C" {
    pub fn _aligned_malloc(_Size: size_t, _Alignment: size_t) -> *mut cty::c_void;
}
extern "C" {
    pub fn _aligned_offset_malloc(
        _Size: size_t,
        _Alignment: size_t,
        _Offset: size_t,
    ) -> *mut cty::c_void;
}
extern "C" {
    pub fn _aligned_msize(_Block: *mut cty::c_void, _Alignment: size_t, _Offset: size_t) -> size_t;
}
extern "C" {
    pub fn _aligned_offset_realloc(
        _Block: *mut cty::c_void,
        _Size: size_t,
        _Alignment: size_t,
        _Offset: size_t,
    ) -> *mut cty::c_void;
}
extern "C" {
    pub fn _aligned_offset_recalloc(
        _Block: *mut cty::c_void,
        _Count: size_t,
        _Size: size_t,
        _Alignment: size_t,
        _Offset: size_t,
    ) -> *mut cty::c_void;
}
extern "C" {
    pub fn _aligned_realloc(
        _Block: *mut cty::c_void,
        _Size: size_t,
        _Alignment: size_t,
    ) -> *mut cty::c_void;
}
extern "C" {
    pub fn _aligned_recalloc(
        _Block: *mut cty::c_void,
        _Count: size_t,
        _Size: size_t,
        _Alignment: size_t,
    ) -> *mut cty::c_void;
}
pub type max_align_t = f64;
pub type _CoreCrtSecureSearchSortCompareFunction = ::core::option::Option<
    unsafe extern "C" fn(
        arg1: *mut cty::c_void,
        arg2: *const cty::c_void,
        arg3: *const cty::c_void,
    ) -> cty::c_int,
>;
pub type _CoreCrtNonSecureSearchSortCompareFunction = ::core::option::Option<
    unsafe extern "C" fn(arg1: *const cty::c_void, arg2: *const cty::c_void) -> cty::c_int,
>;
extern "C" {
    pub fn bsearch_s(
        _Key: *const cty::c_void,
        _Base: *const cty::c_void,
        _NumOfElements: rsize_t,
        _SizeOfElements: rsize_t,
        _CompareFunction: _CoreCrtSecureSearchSortCompareFunction,
        _Context: *mut cty::c_void,
    ) -> *mut cty::c_void;
}
extern "C" {
    pub fn qsort_s(
        _Base: *mut cty::c_void,
        _NumOfElements: rsize_t,
        _SizeOfElements: rsize_t,
        _CompareFunction: _CoreCrtSecureSearchSortCompareFunction,
        _Context: *mut cty::c_void,
    );
}
extern "C" {
    pub fn bsearch(
        _Key: *const cty::c_void,
        _Base: *const cty::c_void,
        _NumOfElements: size_t,
        _SizeOfElements: size_t,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    ) -> *mut cty::c_void;
}
extern "C" {
    pub fn qsort(
        _Base: *mut cty::c_void,
        _NumOfElements: size_t,
        _SizeOfElements: size_t,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    );
}
extern "C" {
    pub fn _lfind_s(
        _Key: *const cty::c_void,
        _Base: *const cty::c_void,
        _NumOfElements: *mut cty::c_uint,
        _SizeOfElements: size_t,
        _CompareFunction: _CoreCrtSecureSearchSortCompareFunction,
        _Context: *mut cty::c_void,
    ) -> *mut cty::c_void;
}
extern "C" {
    pub fn _lfind(
        _Key: *const cty::c_void,
        _Base: *const cty::c_void,
        _NumOfElements: *mut cty::c_uint,
        _SizeOfElements: cty::c_uint,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    ) -> *mut cty::c_void;
}
extern "C" {
    pub fn _lsearch_s(
        _Key: *const cty::c_void,
        _Base: *mut cty::c_void,
        _NumOfElements: *mut cty::c_uint,
        _SizeOfElements: size_t,
        _CompareFunction: _CoreCrtSecureSearchSortCompareFunction,
        _Context: *mut cty::c_void,
    ) -> *mut cty::c_void;
}
extern "C" {
    pub fn _lsearch(
        _Key: *const cty::c_void,
        _Base: *mut cty::c_void,
        _NumOfElements: *mut cty::c_uint,
        _SizeOfElements: cty::c_uint,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    ) -> *mut cty::c_void;
}
extern "C" {
    pub fn lfind(
        _Key: *const cty::c_void,
        _Base: *const cty::c_void,
        _NumOfElements: *mut cty::c_uint,
        _SizeOfElements: cty::c_uint,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    ) -> *mut cty::c_void;
}
extern "C" {
    pub fn lsearch(
        _Key: *const cty::c_void,
        _Base: *mut cty::c_void,
        _NumOfElements: *mut cty::c_uint,
        _SizeOfElements: cty::c_uint,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    ) -> *mut cty::c_void;
}
extern "C" {
    pub fn _itow_s(
        _Value: cty::c_int,
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
        _Radix: cty::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _itow(_Value: cty::c_int, _Buffer: *mut wchar_t, _Radix: cty::c_int) -> *mut wchar_t;
}
extern "C" {
    pub fn _ltow_s(
        _Value: cty::c_long,
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
        _Radix: cty::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ltow(_Value: cty::c_long, _Buffer: *mut wchar_t, _Radix: cty::c_int) -> *mut wchar_t;
}
extern "C" {
    pub fn _ultow_s(
        _Value: cty::c_ulong,
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
        _Radix: cty::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ultow(_Value: cty::c_ulong, _Buffer: *mut wchar_t, _Radix: cty::c_int) -> *mut wchar_t;
}
extern "C" {
    pub fn wcstod(_String: *const wchar_t, _EndPtr: *mut *mut wchar_t) -> f64;
}
extern "C" {
    pub fn _wcstod_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Locale: _locale_t,
    ) -> f64;
}
extern "C" {
    pub fn wcstol(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: cty::c_int,
    ) -> cty::c_long;
}
extern "C" {
    pub fn _wcstol_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: cty::c_int,
        _Locale: _locale_t,
    ) -> cty::c_long;
}
extern "C" {
    pub fn wcstoll(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: cty::c_int,
    ) -> cty::c_longlong;
}
extern "C" {
    pub fn _wcstoll_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: cty::c_int,
        _Locale: _locale_t,
    ) -> cty::c_longlong;
}
extern "C" {
    pub fn wcstoul(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: cty::c_int,
    ) -> cty::c_ulong;
}
extern "C" {
    pub fn _wcstoul_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: cty::c_int,
        _Locale: _locale_t,
    ) -> cty::c_ulong;
}
extern "C" {
    pub fn wcstoull(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: cty::c_int,
    ) -> cty::c_ulonglong;
}
extern "C" {
    pub fn _wcstoull_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: cty::c_int,
        _Locale: _locale_t,
    ) -> cty::c_ulonglong;
}
extern "C" {
    pub fn wcstold(_String: *const wchar_t, _EndPtr: *mut *mut wchar_t) -> f64;
}
extern "C" {
    pub fn _wcstold_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Locale: _locale_t,
    ) -> f64;
}
extern "C" {
    pub fn wcstof(_String: *const wchar_t, _EndPtr: *mut *mut wchar_t) -> f32;
}
extern "C" {
    pub fn _wcstof_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Locale: _locale_t,
    ) -> f32;
}
extern "C" {
    pub fn _wtof(_String: *const wchar_t) -> f64;
}
extern "C" {
    pub fn _wtof_l(_String: *const wchar_t, _Locale: _locale_t) -> f64;
}
extern "C" {
    pub fn _wtoi(_String: *const wchar_t) -> cty::c_int;
}
extern "C" {
    pub fn _wtoi_l(_String: *const wchar_t, _Locale: _locale_t) -> cty::c_int;
}
extern "C" {
    pub fn _wtol(_String: *const wchar_t) -> cty::c_long;
}
extern "C" {
    pub fn _wtol_l(_String: *const wchar_t, _Locale: _locale_t) -> cty::c_long;
}
extern "C" {
    pub fn _wtoll(_String: *const wchar_t) -> cty::c_longlong;
}
extern "C" {
    pub fn _wtoll_l(_String: *const wchar_t, _Locale: _locale_t) -> cty::c_longlong;
}
extern "C" {
    pub fn _i64tow_s(
        _Value: cty::c_longlong,
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
        _Radix: cty::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _i64tow(
        _Value: cty::c_longlong,
        _Buffer: *mut wchar_t,
        _Radix: cty::c_int,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn _ui64tow_s(
        _Value: cty::c_ulonglong,
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
        _Radix: cty::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ui64tow(
        _Value: cty::c_ulonglong,
        _Buffer: *mut wchar_t,
        _Radix: cty::c_int,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn _wtoi64(_String: *const wchar_t) -> cty::c_longlong;
}
extern "C" {
    pub fn _wtoi64_l(_String: *const wchar_t, _Locale: _locale_t) -> cty::c_longlong;
}
extern "C" {
    pub fn _wcstoi64(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: cty::c_int,
    ) -> cty::c_longlong;
}
extern "C" {
    pub fn _wcstoi64_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: cty::c_int,
        _Locale: _locale_t,
    ) -> cty::c_longlong;
}
extern "C" {
    pub fn _wcstoui64(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: cty::c_int,
    ) -> cty::c_ulonglong;
}
extern "C" {
    pub fn _wcstoui64_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: cty::c_int,
        _Locale: _locale_t,
    ) -> cty::c_ulonglong;
}
extern "C" {
    pub fn _wfullpath(
        _Buffer: *mut wchar_t,
        _Path: *const wchar_t,
        _BufferCount: size_t,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn _wmakepath_s(
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
        _Drive: *const wchar_t,
        _Dir: *const wchar_t,
        _Filename: *const wchar_t,
        _Ext: *const wchar_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wmakepath(
        _Buffer: *mut wchar_t,
        _Drive: *const wchar_t,
        _Dir: *const wchar_t,
        _Filename: *const wchar_t,
        _Ext: *const wchar_t,
    );
}
extern "C" {
    pub fn _wsplitpath(
        _FullPath: *const wchar_t,
        _Drive: *mut wchar_t,
        _Dir: *mut wchar_t,
        _Filename: *mut wchar_t,
        _Ext: *mut wchar_t,
    );
}
extern "C" {
    pub fn _wsplitpath_s(
        _FullPath: *const wchar_t,
        _Drive: *mut wchar_t,
        _DriveCount: size_t,
        _Dir: *mut wchar_t,
        _DirCount: size_t,
        _Filename: *mut wchar_t,
        _FilenameCount: size_t,
        _Ext: *mut wchar_t,
        _ExtCount: size_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wdupenv_s(
        _Buffer: *mut *mut wchar_t,
        _BufferCount: *mut size_t,
        _VarName: *const wchar_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wgetenv(_VarName: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wgetenv_s(
        _RequiredCount: *mut size_t,
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
        _VarName: *const wchar_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wputenv(_EnvString: *const wchar_t) -> cty::c_int;
}
extern "C" {
    pub fn _wputenv_s(_Name: *const wchar_t, _Value: *const wchar_t) -> errno_t;
}
extern "C" {
    pub fn _wsearchenv_s(
        _Filename: *const wchar_t,
        _VarName: *const wchar_t,
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wsearchenv(
        _Filename: *const wchar_t,
        _VarName: *const wchar_t,
        _ResultPath: *mut wchar_t,
    );
}
extern "C" {
    pub fn _wsystem(_Command: *const wchar_t) -> cty::c_int;
}
extern "C" {
    pub fn _swab(_Buf1: *mut cty::c_char, _Buf2: *mut cty::c_char, _SizeInBytes: cty::c_int);
}
extern "C" {
    pub fn exit(_Code: cty::c_int);
}
extern "C" {
    pub fn _exit(_Code: cty::c_int);
}
extern "C" {
    pub fn _Exit(_Code: cty::c_int);
}
extern "C" {
    pub fn quick_exit(_Code: cty::c_int);
}
extern "C" {
    pub fn abort();
}
extern "C" {
    pub fn _set_abort_behavior(_Flags: cty::c_uint, _Mask: cty::c_uint) -> cty::c_uint;
}
pub type _onexit_t = ::core::option::Option<unsafe extern "C" fn() -> cty::c_int>;
extern "C" {
    pub fn atexit(arg1: ::core::option::Option<unsafe extern "C" fn()>) -> cty::c_int;
}
extern "C" {
    pub fn _onexit(_Func: _onexit_t) -> _onexit_t;
}
extern "C" {
    pub fn at_quick_exit(arg1: ::core::option::Option<unsafe extern "C" fn()>) -> cty::c_int;
}
pub type _purecall_handler = ::core::option::Option<unsafe extern "C" fn()>;
pub type _invalid_parameter_handler = ::core::option::Option<
    unsafe extern "C" fn(
        arg1: *const wchar_t,
        arg2: *const wchar_t,
        arg3: *const wchar_t,
        arg4: cty::c_uint,
        arg5: usize,
    ),
>;
extern "C" {
    pub fn _set_purecall_handler(_Handler: _purecall_handler) -> _purecall_handler;
}
extern "C" {
    pub fn _get_purecall_handler() -> _purecall_handler;
}
extern "C" {
    pub fn _set_invalid_parameter_handler(
        _Handler: _invalid_parameter_handler,
    ) -> _invalid_parameter_handler;
}
extern "C" {
    pub fn _get_invalid_parameter_handler() -> _invalid_parameter_handler;
}
extern "C" {
    pub fn _set_thread_local_invalid_parameter_handler(
        _Handler: _invalid_parameter_handler,
    ) -> _invalid_parameter_handler;
}
extern "C" {
    pub fn _get_thread_local_invalid_parameter_handler() -> _invalid_parameter_handler;
}
extern "C" {
    pub fn _set_error_mode(_Mode: cty::c_int) -> cty::c_int;
}
extern "C" {
    pub fn _errno() -> *mut cty::c_int;
}
extern "C" {
    pub fn _set_errno(_Value: cty::c_int) -> errno_t;
}
extern "C" {
    pub fn _get_errno(_Value: *mut cty::c_int) -> errno_t;
}
extern "C" {
    pub fn __doserrno() -> *mut cty::c_ulong;
}
extern "C" {
    pub fn _set_doserrno(_Value: cty::c_ulong) -> errno_t;
}
extern "C" {
    pub fn _get_doserrno(_Value: *mut cty::c_ulong) -> errno_t;
}
extern "C" {
    pub fn __sys_errlist() -> *mut *mut cty::c_char;
}
extern "C" {
    pub fn __sys_nerr() -> *mut cty::c_int;
}
extern "C" {
    pub fn __p__pgmptr() -> *mut *mut cty::c_char;
}
extern "C" {
    pub fn __p__wpgmptr() -> *mut *mut wchar_t;
}
extern "C" {
    pub fn __p__fmode() -> *mut cty::c_int;
}
extern "C" {
    pub fn _get_pgmptr(_Value: *mut *mut cty::c_char) -> errno_t;
}
extern "C" {
    pub fn _get_wpgmptr(_Value: *mut *mut wchar_t) -> errno_t;
}
extern "C" {
    pub fn _set_fmode(_Mode: cty::c_int) -> errno_t;
}
extern "C" {
    pub fn _get_fmode(_PMode: *mut cty::c_int) -> errno_t;
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct _div_t {
    pub quot: cty::c_int,
    pub rem: cty::c_int,
}
#[test]
fn bindgen_test_layout__div_t() {
    assert_eq!(
        ::core::mem::size_of::<_div_t>(),
        8usize,
        concat!("Size of: ", stringify!(_div_t))
    );
    assert_eq!(
        ::core::mem::align_of::<_div_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_div_t))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_div_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_div_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_div_t>())).rem as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_div_t),
            "::",
            stringify!(rem)
        )
    );
}
pub type div_t = _div_t;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct _ldiv_t {
    pub quot: cty::c_long,
    pub rem: cty::c_long,
}
#[test]
fn bindgen_test_layout__ldiv_t() {
    assert_eq!(
        ::core::mem::size_of::<_ldiv_t>(),
        8usize,
        concat!("Size of: ", stringify!(_ldiv_t))
    );
    assert_eq!(
        ::core::mem::align_of::<_ldiv_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_ldiv_t))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_ldiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_ldiv_t>())).rem as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_ldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
pub type ldiv_t = _ldiv_t;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct _lldiv_t {
    pub quot: cty::c_longlong,
    pub rem: cty::c_longlong,
}
#[test]
fn bindgen_test_layout__lldiv_t() {
    assert_eq!(
        ::core::mem::size_of::<_lldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(_lldiv_t))
    );
    assert_eq!(
        ::core::mem::align_of::<_lldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_lldiv_t))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_lldiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_lldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_lldiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_lldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
pub type lldiv_t = _lldiv_t;
extern "C" {
    pub fn abs(_Number: cty::c_int) -> cty::c_int;
}
extern "C" {
    pub fn labs(_Number: cty::c_long) -> cty::c_long;
}
extern "C" {
    pub fn llabs(_Number: cty::c_longlong) -> cty::c_longlong;
}
extern "C" {
    pub fn _abs64(_Number: cty::c_longlong) -> cty::c_longlong;
}
extern "C" {
    pub fn _byteswap_ushort(_Number: cty::c_ushort) -> cty::c_ushort;
}
extern "C" {
    pub fn _byteswap_ulong(_Number: cty::c_ulong) -> cty::c_ulong;
}
extern "C" {
    pub fn _byteswap_uint64(_Number: cty::c_ulonglong) -> cty::c_ulonglong;
}
extern "C" {
    pub fn div(_Numerator: cty::c_int, _Denominator: cty::c_int) -> div_t;
}
extern "C" {
    pub fn ldiv(_Numerator: cty::c_long, _Denominator: cty::c_long) -> ldiv_t;
}
extern "C" {
    pub fn lldiv(_Numerator: cty::c_longlong, _Denominator: cty::c_longlong) -> lldiv_t;
}
extern "C" {
    pub fn _rotl(_Value: cty::c_uint, _Shift: cty::c_int) -> cty::c_uint;
}
extern "C" {
    pub fn _lrotl(_Value: cty::c_ulong, _Shift: cty::c_int) -> cty::c_ulong;
}
extern "C" {
    pub fn _rotl64(_Value: cty::c_ulonglong, _Shift: cty::c_int) -> cty::c_ulonglong;
}
extern "C" {
    pub fn _rotr(_Value: cty::c_uint, _Shift: cty::c_int) -> cty::c_uint;
}
extern "C" {
    pub fn _lrotr(_Value: cty::c_ulong, _Shift: cty::c_int) -> cty::c_ulong;
}
extern "C" {
    pub fn _rotr64(_Value: cty::c_ulonglong, _Shift: cty::c_int) -> cty::c_ulonglong;
}
extern "C" {
    pub fn srand(_Seed: cty::c_uint);
}
extern "C" {
    pub fn rand() -> cty::c_int;
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct _LDOUBLE {
    pub ld: [cty::c_uchar; 10usize],
}
#[test]
fn bindgen_test_layout__LDOUBLE() {
    assert_eq!(
        ::core::mem::size_of::<_LDOUBLE>(),
        10usize,
        concat!("Size of: ", stringify!(_LDOUBLE))
    );
    assert_eq!(
        ::core::mem::align_of::<_LDOUBLE>(),
        1usize,
        concat!("Alignment of ", stringify!(_LDOUBLE))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_LDOUBLE>())).ld as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_LDOUBLE),
            "::",
            stringify!(ld)
        )
    );
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct _CRT_DOUBLE {
    pub x: f64,
}
#[test]
fn bindgen_test_layout__CRT_DOUBLE() {
    assert_eq!(
        ::core::mem::size_of::<_CRT_DOUBLE>(),
        8usize,
        concat!("Size of: ", stringify!(_CRT_DOUBLE))
    );
    assert_eq!(
        ::core::mem::align_of::<_CRT_DOUBLE>(),
        8usize,
        concat!("Alignment of ", stringify!(_CRT_DOUBLE))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_CRT_DOUBLE>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_CRT_DOUBLE),
            "::",
            stringify!(x)
        )
    );
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct _CRT_FLOAT {
    pub f: f32,
}
#[test]
fn bindgen_test_layout__CRT_FLOAT() {
    assert_eq!(
        ::core::mem::size_of::<_CRT_FLOAT>(),
        4usize,
        concat!("Size of: ", stringify!(_CRT_FLOAT))
    );
    assert_eq!(
        ::core::mem::align_of::<_CRT_FLOAT>(),
        4usize,
        concat!("Alignment of ", stringify!(_CRT_FLOAT))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_CRT_FLOAT>())).f as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_CRT_FLOAT),
            "::",
            stringify!(f)
        )
    );
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct _LONGDOUBLE {
    pub x: f64,
}
#[test]
fn bindgen_test_layout__LONGDOUBLE() {
    assert_eq!(
        ::core::mem::size_of::<_LONGDOUBLE>(),
        8usize,
        concat!("Size of: ", stringify!(_LONGDOUBLE))
    );
    assert_eq!(
        ::core::mem::align_of::<_LONGDOUBLE>(),
        8usize,
        concat!("Alignment of ", stringify!(_LONGDOUBLE))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_LONGDOUBLE>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_LONGDOUBLE),
            "::",
            stringify!(x)
        )
    );
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct _LDBL12 {
    pub ld12: [cty::c_uchar; 12usize],
}
#[test]
fn bindgen_test_layout__LDBL12() {
    assert_eq!(
        ::core::mem::size_of::<_LDBL12>(),
        12usize,
        concat!("Size of: ", stringify!(_LDBL12))
    );
    assert_eq!(
        ::core::mem::align_of::<_LDBL12>(),
        1usize,
        concat!("Alignment of ", stringify!(_LDBL12))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_LDBL12>())).ld12 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_LDBL12),
            "::",
            stringify!(ld12)
        )
    );
}
extern "C" {
    pub fn atof(_String: *const cty::c_char) -> f64;
}
extern "C" {
    pub fn atoi(_String: *const cty::c_char) -> cty::c_int;
}
extern "C" {
    pub fn atol(_String: *const cty::c_char) -> cty::c_long;
}
extern "C" {
    pub fn atoll(_String: *const cty::c_char) -> cty::c_longlong;
}
extern "C" {
    pub fn _atoi64(_String: *const cty::c_char) -> cty::c_longlong;
}
extern "C" {
    pub fn _atof_l(_String: *const cty::c_char, _Locale: _locale_t) -> f64;
}
extern "C" {
    pub fn _atoi_l(_String: *const cty::c_char, _Locale: _locale_t) -> cty::c_int;
}
extern "C" {
    pub fn _atol_l(_String: *const cty::c_char, _Locale: _locale_t) -> cty::c_long;
}
extern "C" {
    pub fn _atoll_l(_String: *const cty::c_char, _Locale: _locale_t) -> cty::c_longlong;
}
extern "C" {
    pub fn _atoi64_l(_String: *const cty::c_char, _Locale: _locale_t) -> cty::c_longlong;
}
extern "C" {
    pub fn _atoflt(_Result: *mut _CRT_FLOAT, _String: *const cty::c_char) -> cty::c_int;
}
extern "C" {
    pub fn _atodbl(_Result: *mut _CRT_DOUBLE, _String: *mut cty::c_char) -> cty::c_int;
}
extern "C" {
    pub fn _atoldbl(_Result: *mut _LDOUBLE, _String: *mut cty::c_char) -> cty::c_int;
}
extern "C" {
    pub fn _atoflt_l(
        _Result: *mut _CRT_FLOAT,
        _String: *const cty::c_char,
        _Locale: _locale_t,
    ) -> cty::c_int;
}
extern "C" {
    pub fn _atodbl_l(
        _Result: *mut _CRT_DOUBLE,
        _String: *mut cty::c_char,
        _Locale: _locale_t,
    ) -> cty::c_int;
}
extern "C" {
    pub fn _atoldbl_l(
        _Result: *mut _LDOUBLE,
        _String: *mut cty::c_char,
        _Locale: _locale_t,
    ) -> cty::c_int;
}
extern "C" {
    pub fn strtof(_String: *const cty::c_char, _EndPtr: *mut *mut cty::c_char) -> f32;
}
extern "C" {
    pub fn _strtof_l(
        _String: *const cty::c_char,
        _EndPtr: *mut *mut cty::c_char,
        _Locale: _locale_t,
    ) -> f32;
}
extern "C" {
    pub fn strtod(_String: *const cty::c_char, _EndPtr: *mut *mut cty::c_char) -> f64;
}
extern "C" {
    pub fn _strtod_l(
        _String: *const cty::c_char,
        _EndPtr: *mut *mut cty::c_char,
        _Locale: _locale_t,
    ) -> f64;
}
extern "C" {
    pub fn strtold(_String: *const cty::c_char, _EndPtr: *mut *mut cty::c_char) -> f64;
}
extern "C" {
    pub fn _strtold_l(
        _String: *const cty::c_char,
        _EndPtr: *mut *mut cty::c_char,
        _Locale: _locale_t,
    ) -> f64;
}
extern "C" {
    pub fn strtol(
        _String: *const cty::c_char,
        _EndPtr: *mut *mut cty::c_char,
        _Radix: cty::c_int,
    ) -> cty::c_long;
}
extern "C" {
    pub fn _strtol_l(
        _String: *const cty::c_char,
        _EndPtr: *mut *mut cty::c_char,
        _Radix: cty::c_int,
        _Locale: _locale_t,
    ) -> cty::c_long;
}
extern "C" {
    pub fn strtoll(
        _String: *const cty::c_char,
        _EndPtr: *mut *mut cty::c_char,
        _Radix: cty::c_int,
    ) -> cty::c_longlong;
}
extern "C" {
    pub fn _strtoll_l(
        _String: *const cty::c_char,
        _EndPtr: *mut *mut cty::c_char,
        _Radix: cty::c_int,
        _Locale: _locale_t,
    ) -> cty::c_longlong;
}
extern "C" {
    pub fn strtoul(
        _String: *const cty::c_char,
        _EndPtr: *mut *mut cty::c_char,
        _Radix: cty::c_int,
    ) -> cty::c_ulong;
}
extern "C" {
    pub fn _strtoul_l(
        _String: *const cty::c_char,
        _EndPtr: *mut *mut cty::c_char,
        _Radix: cty::c_int,
        _Locale: _locale_t,
    ) -> cty::c_ulong;
}
extern "C" {
    pub fn strtoull(
        _String: *const cty::c_char,
        _EndPtr: *mut *mut cty::c_char,
        _Radix: cty::c_int,
    ) -> cty::c_ulonglong;
}
extern "C" {
    pub fn _strtoull_l(
        _String: *const cty::c_char,
        _EndPtr: *mut *mut cty::c_char,
        _Radix: cty::c_int,
        _Locale: _locale_t,
    ) -> cty::c_ulonglong;
}
extern "C" {
    pub fn _strtoi64(
        _String: *const cty::c_char,
        _EndPtr: *mut *mut cty::c_char,
        _Radix: cty::c_int,
    ) -> cty::c_longlong;
}
extern "C" {
    pub fn _strtoi64_l(
        _String: *const cty::c_char,
        _EndPtr: *mut *mut cty::c_char,
        _Radix: cty::c_int,
        _Locale: _locale_t,
    ) -> cty::c_longlong;
}
extern "C" {
    pub fn _strtoui64(
        _String: *const cty::c_char,
        _EndPtr: *mut *mut cty::c_char,
        _Radix: cty::c_int,
    ) -> cty::c_ulonglong;
}
extern "C" {
    pub fn _strtoui64_l(
        _String: *const cty::c_char,
        _EndPtr: *mut *mut cty::c_char,
        _Radix: cty::c_int,
        _Locale: _locale_t,
    ) -> cty::c_ulonglong;
}
extern "C" {
    pub fn _itoa_s(
        _Value: cty::c_int,
        _Buffer: *mut cty::c_char,
        _BufferCount: size_t,
        _Radix: cty::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _itoa(
        _Value: cty::c_int,
        _Buffer: *mut cty::c_char,
        _Radix: cty::c_int,
    ) -> *mut cty::c_char;
}
extern "C" {
    pub fn _ltoa_s(
        _Value: cty::c_long,
        _Buffer: *mut cty::c_char,
        _BufferCount: size_t,
        _Radix: cty::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ltoa(
        _Value: cty::c_long,
        _Buffer: *mut cty::c_char,
        _Radix: cty::c_int,
    ) -> *mut cty::c_char;
}
extern "C" {
    pub fn _ultoa_s(
        _Value: cty::c_ulong,
        _Buffer: *mut cty::c_char,
        _BufferCount: size_t,
        _Radix: cty::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ultoa(
        _Value: cty::c_ulong,
        _Buffer: *mut cty::c_char,
        _Radix: cty::c_int,
    ) -> *mut cty::c_char;
}
extern "C" {
    pub fn _i64toa_s(
        _Value: cty::c_longlong,
        _Buffer: *mut cty::c_char,
        _BufferCount: size_t,
        _Radix: cty::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _i64toa(
        _Value: cty::c_longlong,
        _Buffer: *mut cty::c_char,
        _Radix: cty::c_int,
    ) -> *mut cty::c_char;
}
extern "C" {
    pub fn _ui64toa_s(
        _Value: cty::c_ulonglong,
        _Buffer: *mut cty::c_char,
        _BufferCount: size_t,
        _Radix: cty::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ui64toa(
        _Value: cty::c_ulonglong,
        _Buffer: *mut cty::c_char,
        _Radix: cty::c_int,
    ) -> *mut cty::c_char;
}
extern "C" {
    pub fn _ecvt_s(
        _Buffer: *mut cty::c_char,
        _BufferCount: size_t,
        _Value: f64,
        _DigitCount: cty::c_int,
        _PtDec: *mut cty::c_int,
        _PtSign: *mut cty::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ecvt(
        _Value: f64,
        _DigitCount: cty::c_int,
        _PtDec: *mut cty::c_int,
        _PtSign: *mut cty::c_int,
    ) -> *mut cty::c_char;
}
extern "C" {
    pub fn _fcvt_s(
        _Buffer: *mut cty::c_char,
        _BufferCount: size_t,
        _Value: f64,
        _FractionalDigitCount: cty::c_int,
        _PtDec: *mut cty::c_int,
        _PtSign: *mut cty::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _fcvt(
        _Value: f64,
        _FractionalDigitCount: cty::c_int,
        _PtDec: *mut cty::c_int,
        _PtSign: *mut cty::c_int,
    ) -> *mut cty::c_char;
}
extern "C" {
    pub fn _gcvt_s(
        _Buffer: *mut cty::c_char,
        _BufferCount: size_t,
        _Value: f64,
        _DigitCount: cty::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _gcvt(
        _Value: f64,
        _DigitCount: cty::c_int,
        _Buffer: *mut cty::c_char,
    ) -> *mut cty::c_char;
}
extern "C" {
    pub fn ___mb_cur_max_func() -> cty::c_int;
}
extern "C" {
    pub fn ___mb_cur_max_l_func(_Locale: _locale_t) -> cty::c_int;
}
extern "C" {
    pub fn mblen(_Ch: *const cty::c_char, _MaxCount: size_t) -> cty::c_int;
}
extern "C" {
    pub fn _mblen_l(_Ch: *const cty::c_char, _MaxCount: size_t, _Locale: _locale_t) -> cty::c_int;
}
extern "C" {
    pub fn _mbstrlen(_String: *const cty::c_char) -> size_t;
}
extern "C" {
    pub fn _mbstrlen_l(_String: *const cty::c_char, _Locale: _locale_t) -> size_t;
}
extern "C" {
    pub fn _mbstrnlen(_String: *const cty::c_char, _MaxCount: size_t) -> size_t;
}
extern "C" {
    pub fn _mbstrnlen_l(
        _String: *const cty::c_char,
        _MaxCount: size_t,
        _Locale: _locale_t,
    ) -> size_t;
}
extern "C" {
    pub fn mbtowc(
        _DstCh: *mut wchar_t,
        _SrcCh: *const cty::c_char,
        _SrcSizeInBytes: size_t,
    ) -> cty::c_int;
}
extern "C" {
    pub fn _mbtowc_l(
        _DstCh: *mut wchar_t,
        _SrcCh: *const cty::c_char,
        _SrcSizeInBytes: size_t,
        _Locale: _locale_t,
    ) -> cty::c_int;
}
extern "C" {
    pub fn mbstowcs_s(
        _PtNumOfCharConverted: *mut size_t,
        _DstBuf: *mut wchar_t,
        _SizeInWords: size_t,
        _SrcBuf: *const cty::c_char,
        _MaxCount: size_t,
    ) -> errno_t;
}
extern "C" {
    pub fn mbstowcs(_Dest: *mut wchar_t, _Source: *const cty::c_char, _MaxCount: size_t) -> size_t;
}
extern "C" {
    pub fn _mbstowcs_s_l(
        _PtNumOfCharConverted: *mut size_t,
        _DstBuf: *mut wchar_t,
        _SizeInWords: size_t,
        _SrcBuf: *const cty::c_char,
        _MaxCount: size_t,
        _Locale: _locale_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _mbstowcs_l(
        _Dest: *mut wchar_t,
        _Source: *const cty::c_char,
        _MaxCount: size_t,
        _Locale: _locale_t,
    ) -> size_t;
}
extern "C" {
    pub fn wctomb(_MbCh: *mut cty::c_char, _WCh: wchar_t) -> cty::c_int;
}
extern "C" {
    pub fn _wctomb_l(_MbCh: *mut cty::c_char, _WCh: wchar_t, _Locale: _locale_t) -> cty::c_int;
}
extern "C" {
    pub fn wctomb_s(
        _SizeConverted: *mut cty::c_int,
        _MbCh: *mut cty::c_char,
        _SizeInBytes: rsize_t,
        _WCh: wchar_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wctomb_s_l(
        _SizeConverted: *mut cty::c_int,
        _MbCh: *mut cty::c_char,
        _SizeInBytes: size_t,
        _WCh: wchar_t,
        _Locale: _locale_t,
    ) -> errno_t;
}
extern "C" {
    pub fn wcstombs_s(
        _PtNumOfCharConverted: *mut size_t,
        _Dst: *mut cty::c_char,
        _DstSizeInBytes: size_t,
        _Src: *const wchar_t,
        _MaxCountInBytes: size_t,
    ) -> errno_t;
}
extern "C" {
    pub fn wcstombs(_Dest: *mut cty::c_char, _Source: *const wchar_t, _MaxCount: size_t) -> size_t;
}
extern "C" {
    pub fn _wcstombs_s_l(
        _PtNumOfCharConverted: *mut size_t,
        _Dst: *mut cty::c_char,
        _DstSizeInBytes: size_t,
        _Src: *const wchar_t,
        _MaxCountInBytes: size_t,
        _Locale: _locale_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wcstombs_l(
        _Dest: *mut cty::c_char,
        _Source: *const wchar_t,
        _MaxCount: size_t,
        _Locale: _locale_t,
    ) -> size_t;
}
extern "C" {
    pub fn _fullpath(
        _Buffer: *mut cty::c_char,
        _Path: *const cty::c_char,
        _BufferCount: size_t,
    ) -> *mut cty::c_char;
}
extern "C" {
    pub fn _makepath_s(
        _Buffer: *mut cty::c_char,
        _BufferCount: size_t,
        _Drive: *const cty::c_char,
        _Dir: *const cty::c_char,
        _Filename: *const cty::c_char,
        _Ext: *const cty::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn _makepath(
        _Buffer: *mut cty::c_char,
        _Drive: *const cty::c_char,
        _Dir: *const cty::c_char,
        _Filename: *const cty::c_char,
        _Ext: *const cty::c_char,
    );
}
extern "C" {
    pub fn _splitpath(
        _FullPath: *const cty::c_char,
        _Drive: *mut cty::c_char,
        _Dir: *mut cty::c_char,
        _Filename: *mut cty::c_char,
        _Ext: *mut cty::c_char,
    );
}
extern "C" {
    pub fn _splitpath_s(
        _FullPath: *const cty::c_char,
        _Drive: *mut cty::c_char,
        _DriveCount: size_t,
        _Dir: *mut cty::c_char,
        _DirCount: size_t,
        _Filename: *mut cty::c_char,
        _FilenameCount: size_t,
        _Ext: *mut cty::c_char,
        _ExtCount: size_t,
    ) -> errno_t;
}
extern "C" {
    pub fn getenv_s(
        _RequiredCount: *mut size_t,
        _Buffer: *mut cty::c_char,
        _BufferCount: rsize_t,
        _VarName: *const cty::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn __p___argc() -> *mut cty::c_int;
}
extern "C" {
    pub fn __p___argv() -> *mut *mut *mut cty::c_char;
}
extern "C" {
    pub fn __p___wargv() -> *mut *mut *mut wchar_t;
}
extern "C" {
    pub fn __p__environ() -> *mut *mut *mut cty::c_char;
}
extern "C" {
    pub fn __p__wenviron() -> *mut *mut *mut wchar_t;
}
extern "C" {
    pub fn getenv(_VarName: *const cty::c_char) -> *mut cty::c_char;
}
extern "C" {
    pub fn _dupenv_s(
        _Buffer: *mut *mut cty::c_char,
        _BufferCount: *mut size_t,
        _VarName: *const cty::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn system(_Command: *const cty::c_char) -> cty::c_int;
}
extern "C" {
    pub fn _putenv(_EnvString: *const cty::c_char) -> cty::c_int;
}
extern "C" {
    pub fn _putenv_s(_Name: *const cty::c_char, _Value: *const cty::c_char) -> errno_t;
}
extern "C" {
    pub fn _searchenv_s(
        _Filename: *const cty::c_char,
        _VarName: *const cty::c_char,
        _Buffer: *mut cty::c_char,
        _BufferCount: size_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _searchenv(
        _Filename: *const cty::c_char,
        _VarName: *const cty::c_char,
        _Buffer: *mut cty::c_char,
    );
}
extern "C" {
    pub fn _seterrormode(_Mode: cty::c_int);
}
extern "C" {
    pub fn _beep(_Frequency: cty::c_uint, _Duration: cty::c_uint);
}
extern "C" {
    pub fn _sleep(_Duration: cty::c_ulong);
}
extern "C" {
    pub fn ecvt(
        _Value: f64,
        _DigitCount: cty::c_int,
        _PtDec: *mut cty::c_int,
        _PtSign: *mut cty::c_int,
    ) -> *mut cty::c_char;
}
extern "C" {
    pub fn fcvt(
        _Value: f64,
        _FractionalDigitCount: cty::c_int,
        _PtDec: *mut cty::c_int,
        _PtSign: *mut cty::c_int,
    ) -> *mut cty::c_char;
}
extern "C" {
    pub fn gcvt(
        _Value: f64,
        _DigitCount: cty::c_int,
        _DstBuf: *mut cty::c_char,
    ) -> *mut cty::c_char;
}
extern "C" {
    pub fn itoa(
        _Value: cty::c_int,
        _Buffer: *mut cty::c_char,
        _Radix: cty::c_int,
    ) -> *mut cty::c_char;
}
extern "C" {
    pub fn ltoa(
        _Value: cty::c_long,
        _Buffer: *mut cty::c_char,
        _Radix: cty::c_int,
    ) -> *mut cty::c_char;
}
extern "C" {
    pub fn swab(_Buf1: *mut cty::c_char, _Buf2: *mut cty::c_char, _SizeInBytes: cty::c_int);
}
extern "C" {
    pub fn ultoa(
        _Value: cty::c_ulong,
        _Buffer: *mut cty::c_char,
        _Radix: cty::c_int,
    ) -> *mut cty::c_char;
}
extern "C" {
    pub fn putenv(_EnvString: *const cty::c_char) -> cty::c_int;
}
extern "C" {
    pub fn onexit(_Func: _onexit_t) -> _onexit_t;
}
extern "C" {
    pub fn memchr(
        _Buf: *const cty::c_void,
        _Val: cty::c_int,
        _MaxCount: cty::c_ulonglong,
    ) -> *mut cty::c_void;
}
extern "C" {
    pub fn memcmp(
        _Buf1: *const cty::c_void,
        _Buf2: *const cty::c_void,
        _Size: cty::c_ulonglong,
    ) -> cty::c_int;
}
extern "C" {
    pub fn memcpy(
        _Dst: *mut cty::c_void,
        _Src: *const cty::c_void,
        _Size: cty::c_ulonglong,
    ) -> *mut cty::c_void;
}
extern "C" {
    pub fn memmove(
        _Dst: *mut cty::c_void,
        _Src: *const cty::c_void,
        _Size: cty::c_ulonglong,
    ) -> *mut cty::c_void;
}
extern "C" {
    pub fn memset(
        _Dst: *mut cty::c_void,
        _Val: cty::c_int,
        _Size: cty::c_ulonglong,
    ) -> *mut cty::c_void;
}
extern "C" {
    pub fn strchr(_Str: *const cty::c_char, _Val: cty::c_int) -> *mut cty::c_char;
}
extern "C" {
    pub fn strrchr(_Str: *const cty::c_char, _Ch: cty::c_int) -> *mut cty::c_char;
}
extern "C" {
    pub fn strstr(_Str: *const cty::c_char, _SubStr: *const cty::c_char) -> *mut cty::c_char;
}
extern "C" {
    pub fn wcschr(_Str: *const cty::c_ushort, _Ch: cty::c_ushort) -> *mut cty::c_ushort;
}
extern "C" {
    pub fn wcsrchr(_Str: *const wchar_t, _Ch: wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsstr(_Str: *const wchar_t, _SubStr: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _memicmp(
        _Buf1: *const cty::c_void,
        _Buf2: *const cty::c_void,
        _Size: size_t,
    ) -> cty::c_int;
}
extern "C" {
    pub fn _memicmp_l(
        _Buf1: *const cty::c_void,
        _Buf2: *const cty::c_void,
        _Size: size_t,
        _Locale: _locale_t,
    ) -> cty::c_int;
}
extern "C" {
    pub fn memccpy(
        _Dst: *mut cty::c_void,
        _Src: *const cty::c_void,
        _Val: cty::c_int,
        _Size: size_t,
    ) -> *mut cty::c_void;
}
extern "C" {
    pub fn memicmp(
        _Buf1: *const cty::c_void,
        _Buf2: *const cty::c_void,
        _Size: size_t,
    ) -> cty::c_int;
}
extern "C" {
    pub fn wcscat_s(
        _Destination: *mut wchar_t,
        _SizeInWords: rsize_t,
        _Source: *const wchar_t,
    ) -> errno_t;
}
extern "C" {
    pub fn wcscpy_s(
        _Destination: *mut wchar_t,
        _SizeInWords: rsize_t,
        _Source: *const wchar_t,
    ) -> errno_t;
}
extern "C" {
    pub fn wcsncat_s(
        _Destination: *mut wchar_t,
        _SizeInWords: rsize_t,
        _Source: *const wchar_t,
        _MaxCount: rsize_t,
    ) -> errno_t;
}
extern "C" {
    pub fn wcsncpy_s(
        _Destination: *mut wchar_t,
        _SizeInWords: rsize_t,
        _Source: *const wchar_t,
        _MaxCount: rsize_t,
    ) -> errno_t;
}
extern "C" {
    pub fn wcstok_s(
        _String: *mut wchar_t,
        _Delimiter: *const wchar_t,
        _Context: *mut *mut wchar_t,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn _wcsdup(_String: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcscat(_Destination: *mut wchar_t, _Source: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcscmp(_String1: *const cty::c_ushort, _String2: *const cty::c_ushort) -> cty::c_int;
}
extern "C" {
    pub fn wcscpy(_Destination: *mut wchar_t, _Source: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcscspn(_String: *const wchar_t, _Control: *const wchar_t) -> size_t;
}
extern "C" {
    pub fn wcslen(_String: *const cty::c_ushort) -> cty::c_ulonglong;
}
extern "C" {
    pub fn wcsnlen(_Source: *const wchar_t, _MaxCount: size_t) -> size_t;
}
extern "C" {
    pub fn wcsncat(
        _Destination: *mut wchar_t,
        _Source: *const wchar_t,
        _Count: size_t,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsncmp(
        _String1: *const cty::c_ushort,
        _String2: *const cty::c_ushort,
        _MaxCount: cty::c_ulonglong,
    ) -> cty::c_int;
}
extern "C" {
    pub fn wcsncpy(
        _Destination: *mut wchar_t,
        _Source: *const wchar_t,
        _Count: size_t,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn wcspbrk(_String: *const wchar_t, _Control: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsspn(_String: *const wchar_t, _Control: *const wchar_t) -> size_t;
}
extern "C" {
    pub fn wcstok(
        _String: *mut wchar_t,
        _Delimiter: *const wchar_t,
        _Context: *mut *mut wchar_t,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn _wcserror(_ErrorNumber: cty::c_int) -> *mut wchar_t;
}
extern "C" {
    pub fn _wcserror_s(
        _Buffer: *mut wchar_t,
        _SizeInWords: size_t,
        _ErrorNumber: cty::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn __wcserror(_String: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn __wcserror_s(
        _Buffer: *mut wchar_t,
        _SizeInWords: size_t,
        _ErrorMessage: *const wchar_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wcsicmp(_String1: *const wchar_t, _String2: *const wchar_t) -> cty::c_int;
}
extern "C" {
    pub fn _wcsicmp_l(
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _Locale: _locale_t,
    ) -> cty::c_int;
}
extern "C" {
    pub fn _wcsnicmp(
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _MaxCount: size_t,
    ) -> cty::c_int;
}
extern "C" {
    pub fn _wcsnicmp_l(
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _MaxCount: size_t,
        _Locale: _locale_t,
    ) -> cty::c_int;
}
extern "C" {
    pub fn _wcsnset_s(
        _Destination: *mut wchar_t,
        _SizeInWords: size_t,
        _Value: wchar_t,
        _MaxCount: size_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wcsnset(_String: *mut wchar_t, _Value: wchar_t, _MaxCount: size_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wcsrev(_String: *mut wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wcsset_s(_Destination: *mut wchar_t, _SizeInWords: size_t, _Value: wchar_t) -> errno_t;
}
extern "C" {
    pub fn _wcsset(_String: *mut wchar_t, _Value: wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wcslwr_s(_String: *mut wchar_t, _SizeInWords: size_t) -> errno_t;
}
extern "C" {
    pub fn _wcslwr(_String: *mut wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wcslwr_s_l(_String: *mut wchar_t, _SizeInWords: size_t, _Locale: _locale_t) -> errno_t;
}
extern "C" {
    pub fn _wcslwr_l(_String: *mut wchar_t, _Locale: _locale_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wcsupr_s(_String: *mut wchar_t, _Size: size_t) -> errno_t;
}
extern "C" {
    pub fn _wcsupr(_String: *mut wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wcsupr_s_l(_String: *mut wchar_t, _Size: size_t, _Locale: _locale_t) -> errno_t;
}
extern "C" {
    pub fn _wcsupr_l(_String: *mut wchar_t, _Locale: _locale_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsxfrm(
        _Destination: *mut wchar_t,
        _Source: *const wchar_t,
        _MaxCount: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn _wcsxfrm_l(
        _Destination: *mut wchar_t,
        _Source: *const wchar_t,
        _MaxCount: size_t,
        _Locale: _locale_t,
    ) -> size_t;
}
extern "C" {
    pub fn wcscoll(_String1: *const wchar_t, _String2: *const wchar_t) -> cty::c_int;
}
extern "C" {
    pub fn _wcscoll_l(
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _Locale: _locale_t,
    ) -> cty::c_int;
}
extern "C" {
    pub fn _wcsicoll(_String1: *const wchar_t, _String2: *const wchar_t) -> cty::c_int;
}
extern "C" {
    pub fn _wcsicoll_l(
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _Locale: _locale_t,
    ) -> cty::c_int;
}
extern "C" {
    pub fn _wcsncoll(
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _MaxCount: size_t,
    ) -> cty::c_int;
}
extern "C" {
    pub fn _wcsncoll_l(
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _MaxCount: size_t,
        _Locale: _locale_t,
    ) -> cty::c_int;
}
extern "C" {
    pub fn _wcsnicoll(
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _MaxCount: size_t,
    ) -> cty::c_int;
}
extern "C" {
    pub fn _wcsnicoll_l(
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _MaxCount: size_t,
        _Locale: _locale_t,
    ) -> cty::c_int;
}
extern "C" {
    pub fn wcsdup(_String: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsicmp(_String1: *const wchar_t, _String2: *const wchar_t) -> cty::c_int;
}
extern "C" {
    pub fn wcsnicmp(
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _MaxCount: size_t,
    ) -> cty::c_int;
}
extern "C" {
    pub fn wcsnset(_String: *mut wchar_t, _Value: wchar_t, _MaxCount: size_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsrev(_String: *mut wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsset(_String: *mut wchar_t, _Value: wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcslwr(_String: *mut wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsupr(_String: *mut wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsicoll(_String1: *const wchar_t, _String2: *const wchar_t) -> cty::c_int;
}
extern "C" {
    pub fn strcpy_s(
        _Destination: *mut cty::c_char,
        _SizeInBytes: rsize_t,
        _Source: *const cty::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn strcat_s(
        _Destination: *mut cty::c_char,
        _SizeInBytes: rsize_t,
        _Source: *const cty::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn strerror_s(
        _Buffer: *mut cty::c_char,
        _SizeInBytes: size_t,
        _ErrorNumber: cty::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn strncat_s(
        _Destination: *mut cty::c_char,
        _SizeInBytes: rsize_t,
        _Source: *const cty::c_char,
        _MaxCount: rsize_t,
    ) -> errno_t;
}
extern "C" {
    pub fn strncpy_s(
        _Destination: *mut cty::c_char,
        _SizeInBytes: rsize_t,
        _Source: *const cty::c_char,
        _MaxCount: rsize_t,
    ) -> errno_t;
}
extern "C" {
    pub fn strtok_s(
        _String: *mut cty::c_char,
        _Delimiter: *const cty::c_char,
        _Context: *mut *mut cty::c_char,
    ) -> *mut cty::c_char;
}
extern "C" {
    pub fn _memccpy(
        _Dst: *mut cty::c_void,
        _Src: *const cty::c_void,
        _Val: cty::c_int,
        _MaxCount: size_t,
    ) -> *mut cty::c_void;
}
extern "C" {
    pub fn strcat(_Destination: *mut cty::c_char, _Source: *const cty::c_char) -> *mut cty::c_char;
}
extern "C" {
    pub fn strcmp(_Str1: *const cty::c_char, _Str2: *const cty::c_char) -> cty::c_int;
}
extern "C" {
    pub fn _strcmpi(_String1: *const cty::c_char, _String2: *const cty::c_char) -> cty::c_int;
}
extern "C" {
    pub fn strcoll(_String1: *const cty::c_char, _String2: *const cty::c_char) -> cty::c_int;
}
extern "C" {
    pub fn _strcoll_l(
        _String1: *const cty::c_char,
        _String2: *const cty::c_char,
        _Locale: _locale_t,
    ) -> cty::c_int;
}
extern "C" {
    pub fn strcpy(_Destination: *mut cty::c_char, _Source: *const cty::c_char) -> *mut cty::c_char;
}
extern "C" {
    pub fn strcspn(_Str: *const cty::c_char, _Control: *const cty::c_char) -> cty::c_ulonglong;
}
extern "C" {
    pub fn _strdup(_Source: *const cty::c_char) -> *mut cty::c_char;
}
extern "C" {
    pub fn _strerror(_ErrorMessage: *const cty::c_char) -> *mut cty::c_char;
}
extern "C" {
    pub fn _strerror_s(
        _Buffer: *mut cty::c_char,
        _SizeInBytes: size_t,
        _ErrorMessage: *const cty::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn strerror(_ErrorMessage: cty::c_int) -> *mut cty::c_char;
}
extern "C" {
    pub fn _stricmp(_String1: *const cty::c_char, _String2: *const cty::c_char) -> cty::c_int;
}
extern "C" {
    pub fn _stricoll(_String1: *const cty::c_char, _String2: *const cty::c_char) -> cty::c_int;
}
extern "C" {
    pub fn _stricoll_l(
        _String1: *const cty::c_char,
        _String2: *const cty::c_char,
        _Locale: _locale_t,
    ) -> cty::c_int;
}
extern "C" {
    pub fn _stricmp_l(
        _String1: *const cty::c_char,
        _String2: *const cty::c_char,
        _Locale: _locale_t,
    ) -> cty::c_int;
}
extern "C" {
    pub fn strlen(_Str: *const cty::c_char) -> cty::c_ulonglong;
}
extern "C" {
    pub fn _strlwr_s(_String: *mut cty::c_char, _Size: size_t) -> errno_t;
}
extern "C" {
    pub fn _strlwr(_String: *mut cty::c_char) -> *mut cty::c_char;
}
extern "C" {
    pub fn _strlwr_s_l(_String: *mut cty::c_char, _Size: size_t, _Locale: _locale_t) -> errno_t;
}
extern "C" {
    pub fn _strlwr_l(_String: *mut cty::c_char, _Locale: _locale_t) -> *mut cty::c_char;
}
extern "C" {
    pub fn strncat(
        _Destination: *mut cty::c_char,
        _Source: *const cty::c_char,
        _Count: cty::c_ulonglong,
    ) -> *mut cty::c_char;
}
extern "C" {
    pub fn strncmp(
        _Str1: *const cty::c_char,
        _Str2: *const cty::c_char,
        _MaxCount: cty::c_ulonglong,
    ) -> cty::c_int;
}
extern "C" {
    pub fn _strnicmp(
        _String1: *const cty::c_char,
        _String2: *const cty::c_char,
        _MaxCount: size_t,
    ) -> cty::c_int;
}
extern "C" {
    pub fn _strnicmp_l(
        _String1: *const cty::c_char,
        _String2: *const cty::c_char,
        _MaxCount: size_t,
        _Locale: _locale_t,
    ) -> cty::c_int;
}
extern "C" {
    pub fn _strnicoll(
        _String1: *const cty::c_char,
        _String2: *const cty::c_char,
        _MaxCount: size_t,
    ) -> cty::c_int;
}
extern "C" {
    pub fn _strnicoll_l(
        _String1: *const cty::c_char,
        _String2: *const cty::c_char,
        _MaxCount: size_t,
        _Locale: _locale_t,
    ) -> cty::c_int;
}
extern "C" {
    pub fn _strncoll(
        _String1: *const cty::c_char,
        _String2: *const cty::c_char,
        _MaxCount: size_t,
    ) -> cty::c_int;
}
extern "C" {
    pub fn _strncoll_l(
        _String1: *const cty::c_char,
        _String2: *const cty::c_char,
        _MaxCount: size_t,
        _Locale: _locale_t,
    ) -> cty::c_int;
}
extern "C" {
    pub fn __strncnt(_String: *const cty::c_char, _Count: size_t) -> size_t;
}
extern "C" {
    pub fn strncpy(
        _Destination: *mut cty::c_char,
        _Source: *const cty::c_char,
        _Count: cty::c_ulonglong,
    ) -> *mut cty::c_char;
}
extern "C" {
    pub fn strnlen(_String: *const cty::c_char, _MaxCount: size_t) -> size_t;
}
extern "C" {
    pub fn _strnset_s(
        _String: *mut cty::c_char,
        _SizeInBytes: size_t,
        _Value: cty::c_int,
        _MaxCount: size_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _strnset(
        _Destination: *mut cty::c_char,
        _Value: cty::c_int,
        _Count: size_t,
    ) -> *mut cty::c_char;
}
extern "C" {
    pub fn strpbrk(_Str: *const cty::c_char, _Control: *const cty::c_char) -> *mut cty::c_char;
}
extern "C" {
    pub fn _strrev(_Str: *mut cty::c_char) -> *mut cty::c_char;
}
extern "C" {
    pub fn _strset_s(
        _Destination: *mut cty::c_char,
        _DestinationSize: size_t,
        _Value: cty::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _strset(_Destination: *mut cty::c_char, _Value: cty::c_int) -> *mut cty::c_char;
}
extern "C" {
    pub fn strspn(_Str: *const cty::c_char, _Control: *const cty::c_char) -> cty::c_ulonglong;
}
extern "C" {
    pub fn strtok(_String: *mut cty::c_char, _Delimiter: *const cty::c_char) -> *mut cty::c_char;
}
extern "C" {
    pub fn _strupr_s(_String: *mut cty::c_char, _Size: size_t) -> errno_t;
}
extern "C" {
    pub fn _strupr(_String: *mut cty::c_char) -> *mut cty::c_char;
}
extern "C" {
    pub fn _strupr_s_l(_String: *mut cty::c_char, _Size: size_t, _Locale: _locale_t) -> errno_t;
}
extern "C" {
    pub fn _strupr_l(_String: *mut cty::c_char, _Locale: _locale_t) -> *mut cty::c_char;
}
extern "C" {
    pub fn strxfrm(
        _Destination: *mut cty::c_char,
        _Source: *const cty::c_char,
        _MaxCount: cty::c_ulonglong,
    ) -> cty::c_ulonglong;
}
extern "C" {
    pub fn _strxfrm_l(
        _Destination: *mut cty::c_char,
        _Source: *const cty::c_char,
        _MaxCount: size_t,
        _Locale: _locale_t,
    ) -> size_t;
}
extern "C" {
    pub fn strdup(_String: *const cty::c_char) -> *mut cty::c_char;
}
extern "C" {
    pub fn strcmpi(_String1: *const cty::c_char, _String2: *const cty::c_char) -> cty::c_int;
}
extern "C" {
    pub fn stricmp(_String1: *const cty::c_char, _String2: *const cty::c_char) -> cty::c_int;
}
extern "C" {
    pub fn strlwr(_String: *mut cty::c_char) -> *mut cty::c_char;
}
extern "C" {
    pub fn strnicmp(
        _String1: *const cty::c_char,
        _String2: *const cty::c_char,
        _MaxCount: size_t,
    ) -> cty::c_int;
}
extern "C" {
    pub fn strnset(
        _String: *mut cty::c_char,
        _Value: cty::c_int,
        _MaxCount: size_t,
    ) -> *mut cty::c_char;
}
extern "C" {
    pub fn strrev(_String: *mut cty::c_char) -> *mut cty::c_char;
}
extern "C" {
    pub fn strset(_String: *mut cty::c_char, _Value: cty::c_int) -> *mut cty::c_char;
}
extern "C" {
    pub fn strupr(_String: *mut cty::c_char) -> *mut cty::c_char;
}
pub type int_least8_t = cty::c_schar;
pub type int_least16_t = cty::c_short;
pub type int_least32_t = cty::c_int;
pub type int_least64_t = cty::c_longlong;
pub type uint_least8_t = cty::c_uchar;
pub type uint_least16_t = cty::c_ushort;
pub type uint_least32_t = cty::c_uint;
pub type uint_least64_t = cty::c_ulonglong;
pub type int_fast8_t = cty::c_schar;
pub type int_fast16_t = cty::c_int;
pub type int_fast32_t = cty::c_int;
pub type int_fast64_t = cty::c_longlong;
pub type uint_fast8_t = cty::c_uchar;
pub type uint_fast16_t = cty::c_uint;
pub type uint_fast32_t = cty::c_uint;
pub type uint_fast64_t = cty::c_ulonglong;
pub type intmax_t = cty::c_longlong;
pub type uintmax_t = cty::c_ulonglong;
extern "C" {
    pub fn USBD_static_malloc(size: u32) -> *mut cty::c_void;
}
extern "C" {
    pub fn USBD_static_free(p: *mut cty::c_void);
}
extern "C" {
    pub fn USB_power(enabled: cty::c_uchar);
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct usb_setup_req {
    pub bmRequest: u8,
    pub bRequest: u8,
    pub wValue: u16,
    pub wIndex: u16,
    pub wLength: u16,
}
#[test]
fn bindgen_test_layout_usb_setup_req() {
    assert_eq!(
        ::core::mem::size_of::<usb_setup_req>(),
        8usize,
        concat!("Size of: ", stringify!(usb_setup_req))
    );
    assert_eq!(
        ::core::mem::align_of::<usb_setup_req>(),
        2usize,
        concat!("Alignment of ", stringify!(usb_setup_req))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<usb_setup_req>())).bmRequest as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_setup_req),
            "::",
            stringify!(bmRequest)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<usb_setup_req>())).bRequest as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_setup_req),
            "::",
            stringify!(bRequest)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<usb_setup_req>())).wValue as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_setup_req),
            "::",
            stringify!(wValue)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<usb_setup_req>())).wIndex as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_setup_req),
            "::",
            stringify!(wIndex)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<usb_setup_req>())).wLength as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_setup_req),
            "::",
            stringify!(wLength)
        )
    );
}
pub type USBD_SetupReqTypedef = usb_setup_req;
pub type Init_t =
    ::core::option::Option<unsafe extern "C" fn(pdev: *mut _USBD_HandleTypeDef, cfgidx: u8) -> u8>;
pub type DeInit_t =
    ::core::option::Option<unsafe extern "C" fn(pdev: *mut _USBD_HandleTypeDef, cfgidx: u8) -> u8>;
pub type Setup_t = ::core::option::Option<
    unsafe extern "C" fn(pdev: *mut _USBD_HandleTypeDef, req: *mut USBD_SetupReqTypedef) -> u8,
>;
pub type EP0_TxSent_t =
    ::core::option::Option<unsafe extern "C" fn(pdev: *mut _USBD_HandleTypeDef) -> u8>;
pub type EP0_RxReady_t =
    ::core::option::Option<unsafe extern "C" fn(pdev: *mut _USBD_HandleTypeDef) -> u8>;
pub type DataIn_t =
    ::core::option::Option<unsafe extern "C" fn(pdev: *mut _USBD_HandleTypeDef, epnum: u8) -> u8>;
pub type DataOut_t = ::core::option::Option<
    unsafe extern "C" fn(
        pdev: *mut _USBD_HandleTypeDef,
        epnum: u8,
        pData: *mut u8,
        arg1: *mut apdu_buffer_t,
    ) -> u8,
>;
pub type SOF_t = ::core::option::Option<unsafe extern "C" fn(pdev: *mut _USBD_HandleTypeDef) -> u8>;
pub type IsoINIncomplete_t =
    ::core::option::Option<unsafe extern "C" fn(pdev: *mut _USBD_HandleTypeDef, epnum: u8) -> u8>;
pub type IsoOUTIncomplete_t =
    ::core::option::Option<unsafe extern "C" fn(pdev: *mut _USBD_HandleTypeDef, epnum: u8) -> u8>;
pub type GetHSConfigDescriptor_t =
    ::core::option::Option<unsafe extern "C" fn(length: *mut u16) -> *mut u8>;
pub type GetFSConfigDescriptor_t =
    ::core::option::Option<unsafe extern "C" fn(length: *mut u16) -> *mut u8>;
pub type GetOtherSpeedConfigDescriptor_t =
    ::core::option::Option<unsafe extern "C" fn(length: *mut u16) -> *mut u8>;
pub type GetDeviceQualifierDescriptor_t =
    ::core::option::Option<unsafe extern "C" fn(length: *mut u16) -> *mut u8>;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct _Device_cb {
    pub Init: Init_t,
    pub DeInit: DeInit_t,
    pub Setup: Setup_t,
    pub EP0_TxSent: EP0_TxSent_t,
    pub EP0_RxReady: EP0_RxReady_t,
    pub DataIn: DataIn_t,
    pub DataOut: DataOut_t,
    pub SOF: SOF_t,
    pub IsoINIncomplete: IsoINIncomplete_t,
    pub IsoOUTIncomplete: IsoOUTIncomplete_t,
    pub GetHSConfigDescriptor: GetHSConfigDescriptor_t,
    pub GetFSConfigDescriptor: GetFSConfigDescriptor_t,
    pub GetOtherSpeedConfigDescriptor: GetOtherSpeedConfigDescriptor_t,
    pub GetDeviceQualifierDescriptor: GetDeviceQualifierDescriptor_t,
}
#[test]
fn bindgen_test_layout__Device_cb() {
    assert_eq!(
        ::core::mem::size_of::<_Device_cb>(),
        112usize,
        concat!("Size of: ", stringify!(_Device_cb))
    );
    assert_eq!(
        ::core::mem::align_of::<_Device_cb>(),
        8usize,
        concat!("Alignment of ", stringify!(_Device_cb))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_Device_cb>())).Init as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_Device_cb),
            "::",
            stringify!(Init)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_Device_cb>())).DeInit as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_Device_cb),
            "::",
            stringify!(DeInit)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_Device_cb>())).Setup as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_Device_cb),
            "::",
            stringify!(Setup)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_Device_cb>())).EP0_TxSent as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_Device_cb),
            "::",
            stringify!(EP0_TxSent)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_Device_cb>())).EP0_RxReady as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_Device_cb),
            "::",
            stringify!(EP0_RxReady)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_Device_cb>())).DataIn as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_Device_cb),
            "::",
            stringify!(DataIn)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_Device_cb>())).DataOut as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_Device_cb),
            "::",
            stringify!(DataOut)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_Device_cb>())).SOF as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_Device_cb),
            "::",
            stringify!(SOF)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_Device_cb>())).IsoINIncomplete as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_Device_cb),
            "::",
            stringify!(IsoINIncomplete)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_Device_cb>())).IsoOUTIncomplete as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_Device_cb),
            "::",
            stringify!(IsoOUTIncomplete)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<_Device_cb>())).GetHSConfigDescriptor as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_Device_cb),
            "::",
            stringify!(GetHSConfigDescriptor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<_Device_cb>())).GetFSConfigDescriptor as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_Device_cb),
            "::",
            stringify!(GetFSConfigDescriptor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<_Device_cb>())).GetOtherSpeedConfigDescriptor as *const _
                as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_Device_cb),
            "::",
            stringify!(GetOtherSpeedConfigDescriptor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<_Device_cb>())).GetDeviceQualifierDescriptor as *const _
                as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_Device_cb),
            "::",
            stringify!(GetDeviceQualifierDescriptor)
        )
    );
}
pub type USBD_ClassTypeDef = _Device_cb;
pub const USBD_SPEED_HIGH: USBD_SpeedTypeDef = 0;
pub const USBD_SPEED_FULL: USBD_SpeedTypeDef = 1;
pub const USBD_SPEED_LOW: USBD_SpeedTypeDef = 2;
pub type USBD_SpeedTypeDef = i32;
pub const USBD_OK: USBD_StatusTypeDef = 0;
pub const USBD_BUSY: USBD_StatusTypeDef = 1;
pub const USBD_FAIL: USBD_StatusTypeDef = 2;
pub type USBD_StatusTypeDef = i32;
pub type GetDeviceDescriptor_t = ::core::option::Option<
    unsafe extern "C" fn(speed: USBD_SpeedTypeDef, length: *mut u16) -> *mut u8,
>;
pub type GetLangIDStrDescriptor_t = ::core::option::Option<
    unsafe extern "C" fn(speed: USBD_SpeedTypeDef, length: *mut u16) -> *mut u8,
>;
pub type GetManufacturerStrDescriptor_t = ::core::option::Option<
    unsafe extern "C" fn(speed: USBD_SpeedTypeDef, length: *mut u16) -> *mut u8,
>;
pub type GetProductStrDescriptor_t = ::core::option::Option<
    unsafe extern "C" fn(speed: USBD_SpeedTypeDef, length: *mut u16) -> *mut u8,
>;
pub type GetSerialStrDescriptor_t = ::core::option::Option<
    unsafe extern "C" fn(speed: USBD_SpeedTypeDef, length: *mut u16) -> *mut u8,
>;
pub type GetConfigurationStrDescriptor_t = ::core::option::Option<
    unsafe extern "C" fn(speed: USBD_SpeedTypeDef, length: *mut u16) -> *mut u8,
>;
pub type GetInterfaceStrDescriptor_t = ::core::option::Option<
    unsafe extern "C" fn(speed: USBD_SpeedTypeDef, length: *mut u16) -> *mut u8,
>;
pub type GetBOSDescriptor_t = ::core::option::Option<
    unsafe extern "C" fn(speed: USBD_SpeedTypeDef, length: *mut u16) -> *mut u8,
>;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct USBD_DescriptorsTypeDef {
    pub GetDeviceDescriptor: GetDeviceDescriptor_t,
    pub GetLangIDStrDescriptor: GetLangIDStrDescriptor_t,
    pub GetManufacturerStrDescriptor: GetManufacturerStrDescriptor_t,
    pub GetProductStrDescriptor: GetProductStrDescriptor_t,
    pub GetSerialStrDescriptor: GetSerialStrDescriptor_t,
    pub GetConfigurationStrDescriptor: GetConfigurationStrDescriptor_t,
    pub GetInterfaceStrDescriptor: GetInterfaceStrDescriptor_t,
    pub GetBOSDescriptor: GetBOSDescriptor_t,
}
#[test]
fn bindgen_test_layout_USBD_DescriptorsTypeDef() {
    assert_eq!(
        ::core::mem::size_of::<USBD_DescriptorsTypeDef>(),
        64usize,
        concat!("Size of: ", stringify!(USBD_DescriptorsTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<USBD_DescriptorsTypeDef>(),
        8usize,
        concat!("Alignment of ", stringify!(USBD_DescriptorsTypeDef))
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<USBD_DescriptorsTypeDef>())).GetDeviceDescriptor as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(USBD_DescriptorsTypeDef),
            "::",
            stringify!(GetDeviceDescriptor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<USBD_DescriptorsTypeDef>())).GetLangIDStrDescriptor as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(USBD_DescriptorsTypeDef),
            "::",
            stringify!(GetLangIDStrDescriptor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<USBD_DescriptorsTypeDef>())).GetManufacturerStrDescriptor
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(USBD_DescriptorsTypeDef),
            "::",
            stringify!(GetManufacturerStrDescriptor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<USBD_DescriptorsTypeDef>())).GetProductStrDescriptor as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(USBD_DescriptorsTypeDef),
            "::",
            stringify!(GetProductStrDescriptor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<USBD_DescriptorsTypeDef>())).GetSerialStrDescriptor as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(USBD_DescriptorsTypeDef),
            "::",
            stringify!(GetSerialStrDescriptor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<USBD_DescriptorsTypeDef>())).GetConfigurationStrDescriptor
                as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(USBD_DescriptorsTypeDef),
            "::",
            stringify!(GetConfigurationStrDescriptor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<USBD_DescriptorsTypeDef>())).GetInterfaceStrDescriptor
                as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(USBD_DescriptorsTypeDef),
            "::",
            stringify!(GetInterfaceStrDescriptor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<USBD_DescriptorsTypeDef>())).GetBOSDescriptor as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(USBD_DescriptorsTypeDef),
            "::",
            stringify!(GetBOSDescriptor)
        )
    );
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct USBD_EndpointTypeDef {
    pub status: u32,
    pub total_length: u32,
    pub rem_length: u32,
    pub maxpacket: u32,
}
#[test]
fn bindgen_test_layout_USBD_EndpointTypeDef() {
    assert_eq!(
        ::core::mem::size_of::<USBD_EndpointTypeDef>(),
        16usize,
        concat!("Size of: ", stringify!(USBD_EndpointTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<USBD_EndpointTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(USBD_EndpointTypeDef))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<USBD_EndpointTypeDef>())).status as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(USBD_EndpointTypeDef),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<USBD_EndpointTypeDef>())).total_length as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(USBD_EndpointTypeDef),
            "::",
            stringify!(total_length)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<USBD_EndpointTypeDef>())).rem_length as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(USBD_EndpointTypeDef),
            "::",
            stringify!(rem_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<USBD_EndpointTypeDef>())).maxpacket as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(USBD_EndpointTypeDef),
            "::",
            stringify!(maxpacket)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _USBD_HandleTypeDef {
    pub id: u8,
    pub dev_config: u32,
    pub dev_default_config: u32,
    pub dev_config_status: u32,
    pub dev_speed: USBD_SpeedTypeDef,
    pub ep_in: [USBD_EndpointTypeDef; 6usize],
    pub ep_out: [USBD_EndpointTypeDef; 6usize],
    pub ep0_state: u32,
    pub ep0_data_len: u32,
    pub dev_state: u8,
    pub dev_old_state: u8,
    pub dev_address: u8,
    pub dev_connection_status: u8,
    pub dev_test_mode: u8,
    pub dev_remote_wakeup: u32,
    pub request: USBD_SetupReqTypedef,
    pub pDesc: *mut USBD_DescriptorsTypeDef,
    pub interfacesClass: [_USBD_HandleTypeDef__bindgen_ty_1; 3usize],
    pub pUserData: *mut cty::c_void,
    pub pData: *mut cty::c_void,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _USBD_HandleTypeDef__bindgen_ty_1 {
    pub pClass: *mut USBD_ClassTypeDef,
    pub pClassData: *mut cty::c_void,
}
#[test]
fn bindgen_test_layout__USBD_HandleTypeDef__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<_USBD_HandleTypeDef__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(_USBD_HandleTypeDef__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<_USBD_HandleTypeDef__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_USBD_HandleTypeDef__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<_USBD_HandleTypeDef__bindgen_ty_1>())).pClass as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_USBD_HandleTypeDef__bindgen_ty_1),
            "::",
            stringify!(pClass)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<_USBD_HandleTypeDef__bindgen_ty_1>())).pClassData as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_USBD_HandleTypeDef__bindgen_ty_1),
            "::",
            stringify!(pClassData)
        )
    );
}
impl Default for _USBD_HandleTypeDef__bindgen_ty_1 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[test]
fn bindgen_test_layout__USBD_HandleTypeDef() {
    assert_eq!(
        ::core::mem::size_of::<_USBD_HandleTypeDef>(),
        312usize,
        concat!("Size of: ", stringify!(_USBD_HandleTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<_USBD_HandleTypeDef>(),
        8usize,
        concat!("Alignment of ", stringify!(_USBD_HandleTypeDef))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_USBD_HandleTypeDef>())).id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_USBD_HandleTypeDef),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_USBD_HandleTypeDef>())).dev_config as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_USBD_HandleTypeDef),
            "::",
            stringify!(dev_config)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<_USBD_HandleTypeDef>())).dev_default_config as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_USBD_HandleTypeDef),
            "::",
            stringify!(dev_default_config)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<_USBD_HandleTypeDef>())).dev_config_status as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_USBD_HandleTypeDef),
            "::",
            stringify!(dev_config_status)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_USBD_HandleTypeDef>())).dev_speed as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_USBD_HandleTypeDef),
            "::",
            stringify!(dev_speed)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_USBD_HandleTypeDef>())).ep_in as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_USBD_HandleTypeDef),
            "::",
            stringify!(ep_in)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_USBD_HandleTypeDef>())).ep_out as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_USBD_HandleTypeDef),
            "::",
            stringify!(ep_out)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_USBD_HandleTypeDef>())).ep0_state as *const _ as usize },
        212usize,
        concat!(
            "Offset of field: ",
            stringify!(_USBD_HandleTypeDef),
            "::",
            stringify!(ep0_state)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<_USBD_HandleTypeDef>())).ep0_data_len as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(_USBD_HandleTypeDef),
            "::",
            stringify!(ep0_data_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_USBD_HandleTypeDef>())).dev_state as *const _ as usize },
        220usize,
        concat!(
            "Offset of field: ",
            stringify!(_USBD_HandleTypeDef),
            "::",
            stringify!(dev_state)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<_USBD_HandleTypeDef>())).dev_old_state as *const _ as usize
        },
        221usize,
        concat!(
            "Offset of field: ",
            stringify!(_USBD_HandleTypeDef),
            "::",
            stringify!(dev_old_state)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<_USBD_HandleTypeDef>())).dev_address as *const _ as usize
        },
        222usize,
        concat!(
            "Offset of field: ",
            stringify!(_USBD_HandleTypeDef),
            "::",
            stringify!(dev_address)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<_USBD_HandleTypeDef>())).dev_connection_status as *const _
                as usize
        },
        223usize,
        concat!(
            "Offset of field: ",
            stringify!(_USBD_HandleTypeDef),
            "::",
            stringify!(dev_connection_status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<_USBD_HandleTypeDef>())).dev_test_mode as *const _ as usize
        },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(_USBD_HandleTypeDef),
            "::",
            stringify!(dev_test_mode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<_USBD_HandleTypeDef>())).dev_remote_wakeup as *const _ as usize
        },
        228usize,
        concat!(
            "Offset of field: ",
            stringify!(_USBD_HandleTypeDef),
            "::",
            stringify!(dev_remote_wakeup)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_USBD_HandleTypeDef>())).request as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(_USBD_HandleTypeDef),
            "::",
            stringify!(request)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_USBD_HandleTypeDef>())).pDesc as *const _ as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(_USBD_HandleTypeDef),
            "::",
            stringify!(pDesc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<_USBD_HandleTypeDef>())).interfacesClass as *const _ as usize
        },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(_USBD_HandleTypeDef),
            "::",
            stringify!(interfacesClass)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_USBD_HandleTypeDef>())).pUserData as *const _ as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(_USBD_HandleTypeDef),
            "::",
            stringify!(pUserData)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_USBD_HandleTypeDef>())).pData as *const _ as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(_USBD_HandleTypeDef),
            "::",
            stringify!(pData)
        )
    );
}
impl Default for _USBD_HandleTypeDef {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type USBD_HandleTypeDef = _USBD_HandleTypeDef;
extern "C" {
    pub fn USBD_CtlSendData(
        pdev: *mut USBD_HandleTypeDef,
        buf: *mut u8,
        len: u16,
    ) -> USBD_StatusTypeDef;
}
extern "C" {
    pub fn USBD_CtlContinueSendData(
        pdev: *mut USBD_HandleTypeDef,
        pbuf: *mut u8,
        len: u16,
    ) -> USBD_StatusTypeDef;
}
extern "C" {
    pub fn USBD_CtlPrepareRx(
        pdev: *mut USBD_HandleTypeDef,
        pbuf: *mut u8,
        len: u16,
    ) -> USBD_StatusTypeDef;
}
extern "C" {
    pub fn USBD_CtlContinueRx(
        pdev: *mut USBD_HandleTypeDef,
        pbuf: *mut u8,
        len: u16,
    ) -> USBD_StatusTypeDef;
}
extern "C" {
    pub fn USBD_CtlSendStatus(pdev: *mut USBD_HandleTypeDef) -> USBD_StatusTypeDef;
}
extern "C" {
    pub fn USBD_CtlReceiveStatus(pdev: *mut USBD_HandleTypeDef) -> USBD_StatusTypeDef;
}
extern "C" {
    pub fn USBD_GetRxCount(pdev: *mut USBD_HandleTypeDef, epnum: u8) -> u16;
}
extern "C" {
    pub fn USBD_StdDevReq(
        pdev: *mut USBD_HandleTypeDef,
        req: *mut USBD_SetupReqTypedef,
    ) -> USBD_StatusTypeDef;
}
extern "C" {
    pub fn USBD_StdItfReq(
        pdev: *mut USBD_HandleTypeDef,
        req: *mut USBD_SetupReqTypedef,
    ) -> USBD_StatusTypeDef;
}
extern "C" {
    pub fn USBD_StdEPReq(
        pdev: *mut USBD_HandleTypeDef,
        req: *mut USBD_SetupReqTypedef,
    ) -> USBD_StatusTypeDef;
}
extern "C" {
    pub fn usbd_is_valid_intf(pdev: *mut USBD_HandleTypeDef, intf: cty::c_uint) -> cty::c_uint;
}
extern "C" {
    pub fn USBD_CtlError(pdev: *mut USBD_HandleTypeDef, req: *mut USBD_SetupReqTypedef);
}
extern "C" {
    pub fn USBD_CtlStall(pdev: *mut USBD_HandleTypeDef);
}
extern "C" {
    pub fn USBD_ParseSetupRequest(req: *mut USBD_SetupReqTypedef, pdata: *mut u8);
}
extern "C" {
    pub fn USBD_GetString(desc: *mut u8, unicode: *mut u8, len: *mut u16);
}
extern "C" {
    pub static mut USBD_Device: USBD_HandleTypeDef;
}
extern "C" {
    pub fn USBD_Init(
        pdev: *mut USBD_HandleTypeDef,
        pdesc: *mut USBD_DescriptorsTypeDef,
        id: u8,
    ) -> USBD_StatusTypeDef;
}
extern "C" {
    pub fn USBD_DeInit(pdev: *mut USBD_HandleTypeDef) -> USBD_StatusTypeDef;
}
extern "C" {
    pub fn USBD_Start(pdev: *mut USBD_HandleTypeDef) -> USBD_StatusTypeDef;
}
extern "C" {
    pub fn USBD_Stop(pdev: *mut USBD_HandleTypeDef) -> USBD_StatusTypeDef;
}
extern "C" {
    pub fn USBD_RegisterClass(
        pdev: *mut USBD_HandleTypeDef,
        pclass: *mut USBD_ClassTypeDef,
    ) -> USBD_StatusTypeDef;
}
extern "C" {
    pub fn USBD_RegisterClassForInterface(
        interfaceidx: u8,
        pdev: *mut USBD_HandleTypeDef,
        pclass: *mut USBD_ClassTypeDef,
    ) -> USBD_StatusTypeDef;
}
extern "C" {
    pub fn USBD_RunTestMode(pdev: *mut USBD_HandleTypeDef) -> USBD_StatusTypeDef;
}
extern "C" {
    pub fn USBD_SetClassConfig(pdev: *mut USBD_HandleTypeDef, cfgidx: u8) -> USBD_StatusTypeDef;
}
extern "C" {
    pub fn USBD_ClrClassConfig(pdev: *mut USBD_HandleTypeDef, cfgidx: u8) -> USBD_StatusTypeDef;
}
// extern "C" {
//     pub fn USBD_LL_SetupStage(pdev: *mut USBD_HandleTypeDef, psetup: *mut u8)
//         -> USBD_StatusTypeDef;
// }
// extern "C" {
//     pub fn USBD_LL_DataOutStage(
//         pdev: *mut USBD_HandleTypeDef,
//         epnum: u8,
//         pdata: *mut u8,
//         arg1: *mut apdu_buffer_t,
//     ) -> USBD_StatusTypeDef;
// }
// extern "C" {
//     pub fn USBD_LL_DataInStage(
//         pdev: *mut USBD_HandleTypeDef,
//         epnum: u8,
//         pdata: *mut u8,
//     ) -> USBD_StatusTypeDef;
// }
extern "C" {
    pub fn USBD_LL_Reset(pdev: *mut USBD_HandleTypeDef) -> USBD_StatusTypeDef;
}
extern "C" {
    pub fn USBD_LL_SetSpeed(
        pdev: *mut USBD_HandleTypeDef,
        speed: USBD_SpeedTypeDef,
    ) -> USBD_StatusTypeDef;
}
extern "C" {
    pub fn USBD_LL_Suspend(pdev: *mut USBD_HandleTypeDef) -> USBD_StatusTypeDef;
}
extern "C" {
    pub fn USBD_LL_Resume(pdev: *mut USBD_HandleTypeDef) -> USBD_StatusTypeDef;
}
extern "C" {
    pub fn USBD_LL_SOF(pdev: *mut USBD_HandleTypeDef) -> USBD_StatusTypeDef;
}
extern "C" {
    pub fn USBD_LL_IsoINIncomplete(pdev: *mut USBD_HandleTypeDef, epnum: u8) -> USBD_StatusTypeDef;
}
extern "C" {
    pub fn USBD_LL_IsoOUTIncomplete(pdev: *mut USBD_HandleTypeDef, epnum: u8)
        -> USBD_StatusTypeDef;
}
extern "C" {
    pub fn USBD_LL_DevConnected(pdev: *mut USBD_HandleTypeDef) -> USBD_StatusTypeDef;
}
extern "C" {
    pub fn USBD_LL_DevDisconnected(pdev: *mut USBD_HandleTypeDef) -> USBD_StatusTypeDef;
}
extern "C" {
    pub fn USBD_LL_Init(pdev: *mut USBD_HandleTypeDef) -> USBD_StatusTypeDef;
}
extern "C" {
    pub fn USBD_LL_DeInit(pdev: *mut USBD_HandleTypeDef) -> USBD_StatusTypeDef;
}
extern "C" {
    pub fn USBD_LL_Start(pdev: *mut USBD_HandleTypeDef) -> USBD_StatusTypeDef;
}
extern "C" {
    pub fn USBD_LL_Stop(pdev: *mut USBD_HandleTypeDef) -> USBD_StatusTypeDef;
}
extern "C" {
    pub fn USBD_LL_OpenEP(
        pdev: *mut USBD_HandleTypeDef,
        ep_addr: u8,
        ep_type: u8,
        ep_mps: u16,
    ) -> USBD_StatusTypeDef;
}
extern "C" {
    pub fn USBD_LL_CloseEP(pdev: *mut USBD_HandleTypeDef, ep_addr: u8) -> USBD_StatusTypeDef;
}
extern "C" {
    pub fn USBD_LL_FlushEP(pdev: *mut USBD_HandleTypeDef, ep_addr: u8) -> USBD_StatusTypeDef;
}
extern "C" {
    pub fn USBD_LL_StallEP(pdev: *mut USBD_HandleTypeDef, ep_addr: u8) -> USBD_StatusTypeDef;
}
extern "C" {
    pub fn USBD_LL_ClearStallEP(pdev: *mut USBD_HandleTypeDef, ep_addr: u8) -> USBD_StatusTypeDef;
}
extern "C" {
    pub fn USBD_LL_IsStallEP(pdev: *mut USBD_HandleTypeDef, ep_addr: u8) -> u8;
}
extern "C" {
    pub fn USBD_LL_SetUSBAddress(pdev: *mut USBD_HandleTypeDef, dev_addr: u8)
        -> USBD_StatusTypeDef;
}
extern "C" {
    pub fn USBD_LL_Transmit(
        pdev: *mut USBD_HandleTypeDef,
        ep_addr: u8,
        pbuf: *mut u8,
        size: u16,
    ) -> USBD_StatusTypeDef;
}
extern "C" {
    pub fn USBD_LL_PrepareReceive(
        pdev: *mut USBD_HandleTypeDef,
        ep_addr: u8,
        size: u16,
    ) -> USBD_StatusTypeDef;
}
extern "C" {
    pub fn USBD_LL_GetRxDataSize(pdev: *mut USBD_HandleTypeDef, ep_addr: u8) -> u32;
}
extern "C" {
    pub fn USBD_LL_Delay(Delay: u32);
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct __crt_locale_data {
    pub _address: u8,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct __crt_multibyte_data {
    pub _address: u8,
}
pub type __builtin_va_list = *mut cty::c_char;
